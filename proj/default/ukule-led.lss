
ukule-led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000008c2  00800100  00001414  000014a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cf9  008009c2  008009c2  00001d6a  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000379  00000000  00000000  00001daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012c2  00000000  00000000  00002123  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004dd  00000000  00000000  000033e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f33  00000000  00000000  000038c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000047f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047e  00000000  00000000  00004ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c32  00000000  00000000  00004f36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00005b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_13>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_20>
      54:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__vector_21>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      68:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      6c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      70:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      74:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      7c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      80:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__vector_32>
      84:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      88:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d0 e4       	ldi	r29, 0x40	; 64
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	19 e0       	ldi	r17, 0x09	; 9
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	e4 e1       	ldi	r30, 0x14	; 20
      e0:	f4 e1       	ldi	r31, 0x14	; 20
      e2:	00 e0       	ldi	r16, 0x00	; 0
      e4:	0b bf       	out	0x3b, r16	; 59
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
      e8:	07 90       	elpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a2 3c       	cpi	r26, 0xC2	; 194
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
      f2:	16 e1       	ldi	r17, 0x16	; 22
      f4:	a2 ec       	ldi	r26, 0xC2	; 194
      f6:	b9 e0       	ldi	r27, 0x09	; 9
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	ab 3b       	cpi	r26, 0xBB	; 187
      fe:	b1 07       	cpc	r27, r17
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	0e 94 ef 05 	call	0xbde	; 0xbde <main>
     106:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     10e:	1f 92       	push	r1
     110:	0f 92       	push	r0
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	0f 92       	push	r0
     116:	0b b6       	in	r0, 0x3b	; 59
     118:	0f 92       	push	r0
     11a:	11 24       	eor	r1, r1
     11c:	2f 92       	push	r2
     11e:	3f 92       	push	r3
     120:	4f 92       	push	r4
     122:	5f 92       	push	r5
     124:	6f 92       	push	r6
     126:	7f 92       	push	r7
     128:	8f 92       	push	r8
     12a:	9f 92       	push	r9
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	2f 93       	push	r18
     13e:	3f 93       	push	r19
     140:	4f 93       	push	r20
     142:	5f 93       	push	r21
     144:	6f 93       	push	r22
     146:	7f 93       	push	r23
     148:	8f 93       	push	r24
     14a:	9f 93       	push	r25
     14c:	af 93       	push	r26
     14e:	bf 93       	push	r27
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	ef 93       	push	r30
     156:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     158:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     15c:	50 90 6c 16 	lds	r5, 0x166C
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     160:	b0 9b       	sbis	0x16, 0	; 22
     162:	14 c0       	rjmp	.+40     	; 0x18c <__vector_13+0x7e>
    ++kernel.cycles;
     164:	80 91 ac 16 	lds	r24, 0x16AC
     168:	90 91 ad 16 	lds	r25, 0x16AD
     16c:	a0 91 ae 16 	lds	r26, 0x16AE
     170:	b0 91 af 16 	lds	r27, 0x16AF
     174:	01 96       	adiw	r24, 0x01	; 1
     176:	a1 1d       	adc	r26, r1
     178:	b1 1d       	adc	r27, r1
     17a:	80 93 ac 16 	sts	0x16AC, r24
     17e:	90 93 ad 16 	sts	0x16AD, r25
     182:	a0 93 ae 16 	sts	0x16AE, r26
     186:	b0 93 af 16 	sts	0x16AF, r27
    TIFR1 |= (1<<TOV1) ;
     18a:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     18c:	80 91 84 00 	lds	r24, 0x0084
     190:	90 91 85 00 	lds	r25, 0x0085
     194:	3c 01       	movw	r6, r24
     196:	88 24       	eor	r8, r8
     198:	99 24       	eor	r9, r9
     19a:	80 91 ac 16 	lds	r24, 0x16AC
     19e:	90 91 ad 16 	lds	r25, 0x16AD
     1a2:	a0 91 ae 16 	lds	r26, 0x16AE
     1a6:	b0 91 af 16 	lds	r27, 0x16AF
     1aa:	dc 01       	movw	r26, r24
     1ac:	99 27       	eor	r25, r25
     1ae:	88 27       	eor	r24, r24
     1b0:	68 0e       	add	r6, r24
     1b2:	79 1e       	adc	r7, r25
     1b4:	8a 1e       	adc	r8, r26
     1b6:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     1b8:	40 90 6b 16 	lds	r4, 0x166B
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	61 e0       	ldi	r22, 0x01	; 1
     1c0:	ff ef       	ldi	r31, 0xFF	; 255
     1c2:	af 2e       	mov	r10, r31
     1c4:	ff ef       	ldi	r31, 0xFF	; 255
     1c6:	bf 2e       	mov	r11, r31
     1c8:	ff ef       	ldi	r31, 0xFF	; 255
     1ca:	cf 2e       	mov	r12, r31
     1cc:	ff e7       	ldi	r31, 0x7F	; 127
     1ce:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     1d0:	eb e0       	ldi	r30, 0x0B	; 11
     1d2:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     1d4:	33 24       	eor	r3, r3
     1d6:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     1d8:	cb e0       	ldi	r28, 0x0B	; 11
     1da:	d0 e0       	ldi	r29, 0x00	; 0
     1dc:	43 c0       	rjmp	.+134    	; 0x264 <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     1de:	62 9d       	mul	r22, r2
     1e0:	d0 01       	movw	r26, r0
     1e2:	11 24       	eor	r1, r1
     1e4:	a3 59       	subi	r26, 0x93	; 147
     1e6:	b9 4e       	sbci	r27, 0xE9	; 233
    if (t->state == TIMEQ) {
     1e8:	1a 96       	adiw	r26, 0x0a	; 10
     1ea:	8c 91       	ld	r24, X
     1ec:	1a 97       	sbiw	r26, 0x0a	; 10
     1ee:	82 30       	cpi	r24, 0x02	; 2
     1f0:	a1 f4       	brne	.+40     	; 0x21a <__vector_13+0x10c>
      if (t->release <= now) {
     1f2:	12 96       	adiw	r26, 0x02	; 2
     1f4:	ed 90       	ld	r14, X+
     1f6:	fd 90       	ld	r15, X+
     1f8:	0d 91       	ld	r16, X+
     1fa:	1c 91       	ld	r17, X
     1fc:	15 97       	sbiw	r26, 0x05	; 5
     1fe:	6e 14       	cp	r6, r14
     200:	7f 04       	cpc	r7, r15
     202:	80 06       	cpc	r8, r16
     204:	91 06       	cpc	r9, r17
     206:	20 f0       	brcs	.+8      	; 0x210 <__vector_13+0x102>
	t->state = READYQ;
     208:	1a 96       	adiw	r26, 0x0a	; 10
     20a:	3c 92       	st	X, r3
     20c:	1a 97       	sbiw	r26, 0x0a	; 10
     20e:	05 c0       	rjmp	.+10     	; 0x21a <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     210:	ea 14       	cp	r14, r10
     212:	fb 04       	cpc	r15, r11
     214:	0c 05       	cpc	r16, r12
     216:	1d 05       	cpc	r17, r13
     218:	10 f0       	brcs	.+4      	; 0x21e <__vector_13+0x110>
     21a:	86 01       	movw	r16, r12
     21c:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     21e:	1a 96       	adiw	r26, 0x0a	; 10
     220:	8c 91       	ld	r24, X
     222:	1a 97       	sbiw	r26, 0x0a	; 10
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	d9 f4       	brne	.+54     	; 0x25e <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     228:	87 2f       	mov	r24, r23
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	8c 9f       	mul	r24, r28
     22e:	f0 01       	movw	r30, r0
     230:	8d 9f       	mul	r24, r29
     232:	f0 0d       	add	r31, r0
     234:	9c 9f       	mul	r25, r28
     236:	f0 0d       	add	r31, r0
     238:	11 24       	eor	r1, r1
     23a:	e5 59       	subi	r30, 0x95	; 149
     23c:	f9 4e       	sbci	r31, 0xE9	; 233
     23e:	16 96       	adiw	r26, 0x06	; 6
     240:	2d 91       	ld	r18, X+
     242:	3d 91       	ld	r19, X+
     244:	4d 91       	ld	r20, X+
     246:	5c 91       	ld	r21, X
     248:	19 97       	sbiw	r26, 0x09	; 9
     24a:	80 85       	ldd	r24, Z+8	; 0x08
     24c:	91 85       	ldd	r25, Z+9	; 0x09
     24e:	a2 85       	ldd	r26, Z+10	; 0x0a
     250:	b3 85       	ldd	r27, Z+11	; 0x0b
     252:	28 17       	cp	r18, r24
     254:	39 07       	cpc	r19, r25
     256:	4a 07       	cpc	r20, r26
     258:	5b 07       	cpc	r21, r27
     25a:	08 f4       	brcc	.+2      	; 0x25e <__vector_13+0x150>
     25c:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     25e:	6f 5f       	subi	r22, 0xFF	; 255
     260:	57 01       	movw	r10, r14
     262:	68 01       	movw	r12, r16
     264:	46 16       	cp	r4, r22
     266:	08 f0       	brcs	.+2      	; 0x26a <__vector_13+0x15c>
     268:	ba cf       	rjmp	.-140    	; 0x1de <__vector_13+0xd0>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     26a:	75 15       	cp	r23, r5
     26c:	b1 f0       	breq	.+44     	; 0x29a <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     26e:	eb e0       	ldi	r30, 0x0B	; 11
     270:	5e 9e       	mul	r5, r30
     272:	d0 01       	movw	r26, r0
     274:	11 24       	eor	r1, r1
     276:	a3 59       	subi	r26, 0x93	; 147
     278:	b9 4e       	sbci	r27, 0xE9	; 233
    t->spl = SPL;
     27a:	8d b7       	in	r24, 0x3d	; 61
     27c:	8c 93       	st	X, r24
    t->sph = SPH;
     27e:	8e b7       	in	r24, 0x3e	; 62
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     284:	7e 9f       	mul	r23, r30
     286:	f0 01       	movw	r30, r0
     288:	11 24       	eor	r1, r1
     28a:	e3 59       	subi	r30, 0x93	; 147
     28c:	f9 4e       	sbci	r31, 0xE9	; 233
    SPH = t->sph;
     28e:	81 81       	ldd	r24, Z+1	; 0x01
     290:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     292:	80 81       	ld	r24, Z
     294:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     296:	70 93 6c 16 	sts	0x166C, r23

  }

  kernel.nextHit = nextHit;  
     29a:	a0 92 b0 16 	sts	0x16B0, r10
     29e:	b0 92 b1 16 	sts	0x16B1, r11
     2a2:	c0 92 b2 16 	sts	0x16B2, r12
     2a6:	d0 92 b3 16 	sts	0x16B3, r13

  now = (kernel.cycles << 16) + TCNT1;
     2aa:	20 91 84 00 	lds	r18, 0x0084
     2ae:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	50 e0       	ldi	r21, 0x00	; 0
     2b6:	80 91 ac 16 	lds	r24, 0x16AC
     2ba:	90 91 ad 16 	lds	r25, 0x16AD
     2be:	a0 91 ae 16 	lds	r26, 0x16AE
     2c2:	b0 91 af 16 	lds	r27, 0x16AF
     2c6:	dc 01       	movw	r26, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	88 27       	eor	r24, r24
     2cc:	28 0f       	add	r18, r24
     2ce:	39 1f       	adc	r19, r25
     2d0:	4a 1f       	adc	r20, r26
     2d2:	5b 1f       	adc	r21, r27
     2d4:	d6 01       	movw	r26, r12
     2d6:	c5 01       	movw	r24, r10
     2d8:	82 1b       	sub	r24, r18
     2da:	93 0b       	sbc	r25, r19
     2dc:	a4 0b       	sbc	r26, r20
     2de:	b5 0b       	sbc	r27, r21
     2e0:	9c 01       	movw	r18, r24
     2e2:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	91 05       	cpc	r25, r1
     2e8:	a1 05       	cpc	r26, r1
     2ea:	b1 05       	cpc	r27, r1
     2ec:	24 f4       	brge	.+8      	; 0x2f6 <__vector_13+0x1e8>
     2ee:	24 e0       	ldi	r18, 0x04	; 4
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     2f6:	80 91 84 00 	lds	r24, 0x0084
     2fa:	90 91 85 00 	lds	r25, 0x0085
     2fe:	a0 e0       	ldi	r26, 0x00	; 0
     300:	b0 e0       	ldi	r27, 0x00	; 0
     302:	82 0f       	add	r24, r18
     304:	93 1f       	adc	r25, r19
     306:	a4 1f       	adc	r26, r20
     308:	b5 1f       	adc	r27, r21
     30a:	80 50       	subi	r24, 0x00	; 0
     30c:	90 40       	sbci	r25, 0x00	; 0
     30e:	a1 40       	sbci	r26, 0x01	; 1
     310:	b0 40       	sbci	r27, 0x00	; 0
     312:	38 f4       	brcc	.+14     	; 0x322 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     314:	80 91 84 00 	lds	r24, 0x0084
     318:	90 91 85 00 	lds	r25, 0x0085
     31c:	82 0f       	add	r24, r18
     31e:	93 1f       	adc	r25, r19
     320:	0e c0       	rjmp	.+28     	; 0x33e <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     322:	80 91 84 00 	lds	r24, 0x0084
     326:	90 91 85 00 	lds	r25, 0x0085
     32a:	8c 5f       	subi	r24, 0xFC	; 252
     32c:	9f 4f       	sbci	r25, 0xFF	; 255
     32e:	28 f4       	brcc	.+10     	; 0x33a <__vector_13+0x22c>
    OCR1A = 0x0000;
     330:	10 92 89 00 	sts	0x0089, r1
     334:	10 92 88 00 	sts	0x0088, r1
     338:	06 c0       	rjmp	.+12     	; 0x346 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     33a:	84 e0       	ldi	r24, 0x04	; 4
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	90 93 89 00 	sts	0x0089, r25
     342:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	80 93 6f 00 	sts	0x006F, r24
}
     34c:	ff 91       	pop	r31
     34e:	ef 91       	pop	r30
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	bf 91       	pop	r27
     356:	af 91       	pop	r26
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	7f 91       	pop	r23
     35e:	6f 91       	pop	r22
     360:	5f 91       	pop	r21
     362:	4f 91       	pop	r20
     364:	3f 91       	pop	r19
     366:	2f 91       	pop	r18
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	bf 90       	pop	r11
     376:	af 90       	pop	r10
     378:	9f 90       	pop	r9
     37a:	8f 90       	pop	r8
     37c:	7f 90       	pop	r7
     37e:	6f 90       	pop	r6
     380:	5f 90       	pop	r5
     382:	4f 90       	pop	r4
     384:	3f 90       	pop	r3
     386:	2f 90       	pop	r2
     388:	0f 90       	pop	r0
     38a:	0b be       	out	0x3b, r0	; 59
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     396:	10 92 85 00 	sts	0x0085, r1
     39a:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     39e:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     3a2:	25 e0       	ldi	r18, 0x05	; 5
     3a4:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     3a8:	22 e0       	ldi	r18, 0x02	; 2
     3aa:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     3ae:	2f ef       	ldi	r18, 0xFF	; 255
     3b0:	30 e4       	ldi	r19, 0x40	; 64
     3b2:	28 1b       	sub	r18, r24
     3b4:	39 0b       	sbc	r19, r25
     3b6:	30 93 ab 16 	sts	0x16AB, r19
     3ba:	20 93 aa 16 	sts	0x16AA, r18
  kernel.nbrOfTasks = 0;
     3be:	10 92 6b 16 	sts	0x166B, r1
  kernel.running = 0;
     3c2:	10 92 6c 16 	sts	0x166C, r1

  kernel.cycles = 0x0000;
     3c6:	10 92 ac 16 	sts	0x16AC, r1
     3ca:	10 92 ad 16 	sts	0x16AD, r1
     3ce:	10 92 ae 16 	sts	0x16AE, r1
     3d2:	10 92 af 16 	sts	0x16AF, r1
  kernel.nextHit = 0x7FFFFFFF;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	9f ef       	ldi	r25, 0xFF	; 255
     3da:	af ef       	ldi	r26, 0xFF	; 255
     3dc:	bf e7       	ldi	r27, 0x7F	; 127
     3de:	80 93 b0 16 	sts	0x16B0, r24
     3e2:	90 93 b1 16 	sts	0x16B1, r25
     3e6:	a0 93 b2 16 	sts	0x16B2, r26
     3ea:	b0 93 b3 16 	sts	0x16B3, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     3ee:	80 93 73 16 	sts	0x1673, r24
     3f2:	90 93 74 16 	sts	0x1674, r25
     3f6:	a0 93 75 16 	sts	0x1675, r26
     3fa:	b0 93 76 16 	sts	0x1676, r27
  kernel.tasks[0].release = 0x00000000;
     3fe:	10 92 6f 16 	sts	0x166F, r1
     402:	10 92 70 16 	sts	0x1670, r1
     406:	10 92 71 16 	sts	0x1671, r1
     40a:	10 92 72 16 	sts	0x1672, r1

  sei(); /* set enabled interrupts */
     40e:	78 94       	sei
}
     410:	08 95       	ret

00000412 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     412:	8f 92       	push	r8
     414:	9f 92       	push	r9
     416:	af 92       	push	r10
     418:	bf 92       	push	r11
     41a:	cf 92       	push	r12
     41c:	df 92       	push	r13
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	49 01       	movw	r8, r18
     42c:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     42e:	f8 94       	cli

  ++kernel.nbrOfTasks;
     430:	20 91 6b 16 	lds	r18, 0x166B
     434:	2f 5f       	subi	r18, 0xFF	; 255
     436:	20 93 6b 16 	sts	0x166B, r18

  sp = kernel.memptr;
     43a:	c0 91 aa 16 	lds	r28, 0x16AA
     43e:	d0 91 ab 16 	lds	r29, 0x16AB
  kernel.memptr -= stacksize;  // decrease free mem ptr
     442:	9e 01       	movw	r18, r28
     444:	26 1b       	sub	r18, r22
     446:	37 0b       	sbc	r19, r23
     448:	30 93 ab 16 	sts	0x16AB, r19
     44c:	20 93 aa 16 	sts	0x16AA, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     450:	88 83       	st	Y, r24
     452:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     454:	92 93       	st	-Z, r25
     456:	31 97       	sbiw	r30, 0x01	; 1
     458:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<24; i++)
     45a:	ce 01       	movw	r24, r28
     45c:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     45e:	1c 92       	st	X, r1
     460:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<24; i++)
     462:	a8 17       	cp	r26, r24
     464:	b9 07       	cpc	r27, r25
     466:	d9 f7       	brne	.-10     	; 0x45e <trtCreateTask+0x4c>
     468:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     46a:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     46c:	d2 92       	st	-Z, r13
     46e:	31 97       	sbiw	r30, 0x01	; 1
     470:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     472:	9e 01       	movw	r18, r28
     474:	24 52       	subi	r18, 0x24	; 36
     476:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     478:	1c 92       	st	X, r1
     47a:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     47c:	a2 17       	cp	r26, r18
     47e:	b3 07       	cpc	r27, r19
     480:	d9 f7       	brne	.-10     	; 0x478 <trtCreateTask+0x66>
     482:	9f 01       	movw	r18, r30
     484:	26 50       	subi	r18, 0x06	; 6
     486:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     488:	e0 91 6b 16 	lds	r30, 0x166B
     48c:	8b e0       	ldi	r24, 0x0B	; 11
     48e:	e8 9f       	mul	r30, r24
     490:	f0 01       	movw	r30, r0
     492:	11 24       	eor	r1, r1
     494:	e3 59       	subi	r30, 0x93	; 147
     496:	f9 4e       	sbci	r31, 0xE9	; 233

  t->release = release;
     498:	82 82       	std	Z+2, r8	; 0x02
     49a:	93 82       	std	Z+3, r9	; 0x03
     49c:	a4 82       	std	Z+4, r10	; 0x04
     49e:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     4a0:	e6 82       	std	Z+6, r14	; 0x06
     4a2:	f7 82       	std	Z+7, r15	; 0x07
     4a4:	00 87       	std	Z+8, r16	; 0x08
     4a6:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     4ac:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     4ae:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     4b0:	0e 94 87 00 	call	0x10e	; 0x10e <__vector_13>

}
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	df 90       	pop	r13
     4c2:	cf 90       	pop	r12
     4c4:	bf 90       	pop	r11
     4c6:	af 90       	pop	r10
     4c8:	9f 90       	pop	r9
     4ca:	8f 90       	pop	r8
     4cc:	08 95       	ret

000004ce <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     4ce:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     4d0:	eb e6       	ldi	r30, 0x6B	; 107
     4d2:	f6 e1       	ldi	r31, 0x16	; 22
     4d4:	e8 0f       	add	r30, r24
     4d6:	f1 1d       	adc	r31, r1
     4d8:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     4da:	78 94       	sei
}
     4dc:	08 95       	ret

000004de <trtWait>:

void trtWait(uint8_t semnbr) {
     4de:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     4e0:	20 91 6c 16 	lds	r18, 0x166C

  cli(); // disable interrupts
     4e4:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     4e6:	e8 2f       	mov	r30, r24
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	ed 55       	subi	r30, 0x5D	; 93
     4ec:	f9 4e       	sbci	r31, 0xE9	; 233
  if ((*s) > 0) {
     4ee:	80 81       	ld	r24, Z
     4f0:	88 23       	and	r24, r24
     4f2:	19 f0       	breq	.+6      	; 0x4fa <trtWait+0x1c>
    (*s)--;
     4f4:	81 50       	subi	r24, 0x01	; 1
     4f6:	80 83       	st	Z, r24
     4f8:	10 c0       	rjmp	.+32     	; 0x51a <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	8b e0       	ldi	r24, 0x0B	; 11
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	28 9f       	mul	r18, r24
     502:	f0 01       	movw	r30, r0
     504:	29 9f       	mul	r18, r25
     506:	f0 0d       	add	r31, r0
     508:	38 9f       	mul	r19, r24
     50a:	f0 0d       	add	r31, r0
     50c:	11 24       	eor	r1, r1
     50e:	e3 59       	subi	r30, 0x93	; 147
     510:	f9 4e       	sbci	r31, 0xE9	; 233
     512:	4e 5f       	subi	r20, 0xFE	; 254
     514:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     516:	0e 94 87 00 	call	0x10e	; 0x10e <__vector_13>
  }

  sei(); // reenable interrupts
     51a:	78 94       	sei
}
     51c:	08 95       	ret

0000051e <trtSignal>:

void trtSignal(uint8_t semnbr) {
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     526:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     528:	00 91 6b 16 	lds	r16, 0x166B
     52c:	e1 e0       	ldi	r30, 0x01	; 1
     52e:	4f ef       	ldi	r20, 0xFF	; 255
     530:	5f ef       	ldi	r21, 0xFF	; 255
     532:	6f ef       	ldi	r22, 0xFF	; 255
     534:	7f ef       	ldi	r23, 0xFF	; 255
     536:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     538:	8b e0       	ldi	r24, 0x0B	; 11
     53a:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     53c:	21 2f       	mov	r18, r17
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	2e 5f       	subi	r18, 0xFE	; 254
     542:	3f 4f       	sbci	r19, 0xFF	; 255
     544:	1e c0       	rjmp	.+60     	; 0x582 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     546:	ef 9d       	mul	r30, r15
     548:	d0 01       	movw	r26, r0
     54a:	11 24       	eor	r1, r1
     54c:	a3 59       	subi	r26, 0x93	; 147
     54e:	b9 4e       	sbci	r27, 0xE9	; 233
    if (t->state == (semnbr + WAIT_OFFSET)) {
     550:	1a 96       	adiw	r26, 0x0a	; 10
     552:	8c 91       	ld	r24, X
     554:	1a 97       	sbiw	r26, 0x0a	; 10
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	82 17       	cp	r24, r18
     55a:	93 07       	cpc	r25, r19
     55c:	69 f4       	brne	.+26     	; 0x578 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     55e:	16 96       	adiw	r26, 0x06	; 6
     560:	8d 91       	ld	r24, X+
     562:	9d 91       	ld	r25, X+
     564:	0d 90       	ld	r0, X+
     566:	bc 91       	ld	r27, X
     568:	a0 2d       	mov	r26, r0
     56a:	48 17       	cp	r20, r24
     56c:	59 07       	cpc	r21, r25
     56e:	6a 07       	cpc	r22, r26
     570:	7b 07       	cpc	r23, r27
     572:	10 f0       	brcs	.+4      	; 0x578 <trtSignal+0x5a>
     574:	fe 2f       	mov	r31, r30
     576:	02 c0       	rjmp	.+4      	; 0x57c <trtSignal+0x5e>
     578:	db 01       	movw	r26, r22
     57a:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     57c:	ef 5f       	subi	r30, 0xFF	; 255
     57e:	ac 01       	movw	r20, r24
     580:	bd 01       	movw	r22, r26
     582:	0e 17       	cp	r16, r30
     584:	00 f7       	brcc	.-64     	; 0x546 <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     586:	ff 23       	and	r31, r31
     588:	41 f4       	brne	.+16     	; 0x59a <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     58a:	e1 2f       	mov	r30, r17
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	e6 59       	subi	r30, 0x96	; 150
     590:	f9 4e       	sbci	r31, 0xE9	; 233
     592:	81 ad       	ldd	r24, Z+57	; 0x39
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	81 af       	std	Z+57, r24	; 0x39
     598:	11 c0       	rjmp	.+34     	; 0x5bc <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     59a:	2f 2f       	mov	r18, r31
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	8b e0       	ldi	r24, 0x0B	; 11
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	28 9f       	mul	r18, r24
     5a4:	f0 01       	movw	r30, r0
     5a6:	29 9f       	mul	r18, r25
     5a8:	f0 0d       	add	r31, r0
     5aa:	38 9f       	mul	r19, r24
     5ac:	f0 0d       	add	r31, r0
     5ae:	11 24       	eor	r1, r1
     5b0:	e5 59       	subi	r30, 0x95	; 149
     5b2:	f9 4e       	sbci	r31, 0xE9	; 233
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     5b8:	0e 94 87 00 	call	0x10e	; 0x10e <__vector_13>
  }

  sei(); // reenable interrupts
     5bc:	78 94       	sei
}
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	08 95       	ret

000005c6 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     5c6:	20 91 84 00 	lds	r18, 0x0084
     5ca:	30 91 85 00 	lds	r19, 0x0085
     5ce:	40 e0       	ldi	r20, 0x00	; 0
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	80 91 ac 16 	lds	r24, 0x16AC
     5d6:	90 91 ad 16 	lds	r25, 0x16AD
     5da:	a0 91 ae 16 	lds	r26, 0x16AE
     5de:	b0 91 af 16 	lds	r27, 0x16AF
     5e2:	dc 01       	movw	r26, r24
     5e4:	99 27       	eor	r25, r25
     5e6:	88 27       	eor	r24, r24
     5e8:	28 0f       	add	r18, r24
     5ea:	39 1f       	adc	r19, r25
     5ec:	4a 1f       	adc	r20, r26
     5ee:	5b 1f       	adc	r21, r27
}
     5f0:	b9 01       	movw	r22, r18
     5f2:	ca 01       	movw	r24, r20
     5f4:	08 95       	ret

000005f6 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     5f6:	e0 91 6c 16 	lds	r30, 0x166C
     5fa:	ab e0       	ldi	r26, 0x0B	; 11
     5fc:	ea 9f       	mul	r30, r26
     5fe:	f0 01       	movw	r30, r0
     600:	11 24       	eor	r1, r1
     602:	e3 59       	subi	r30, 0x93	; 147
     604:	f9 4e       	sbci	r31, 0xE9	; 233

  cli(); // turn off interrupts
     606:	f8 94       	cli

  t->state = TIMEQ;
     608:	a2 e0       	ldi	r26, 0x02	; 2
     60a:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     60c:	62 83       	std	Z+2, r22	; 0x02
     60e:	73 83       	std	Z+3, r23	; 0x03
     610:	84 83       	std	Z+4, r24	; 0x04
     612:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     614:	26 83       	std	Z+6, r18	; 0x06
     616:	37 83       	std	Z+7, r19	; 0x07
     618:	40 87       	std	Z+8, r20	; 0x08
     61a:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     61c:	0e 94 87 00 	call	0x10e	; 0x10e <__vector_13>
}
     620:	08 95       	ret

00000622 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     622:	80 91 6c 16 	lds	r24, 0x166C
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	2b e0       	ldi	r18, 0x0B	; 11
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	82 9f       	mul	r24, r18
     62e:	f0 01       	movw	r30, r0
     630:	83 9f       	mul	r24, r19
     632:	f0 0d       	add	r31, r0
     634:	92 9f       	mul	r25, r18
     636:	f0 0d       	add	r31, r0
     638:	11 24       	eor	r1, r1
     63a:	e5 59       	subi	r30, 0x95	; 149
     63c:	f9 4e       	sbci	r31, 0xE9	; 233
     63e:	df 01       	movw	r26, r30
     640:	14 96       	adiw	r26, 0x04	; 4
     642:	64 81       	ldd	r22, Z+4	; 0x04
     644:	11 96       	adiw	r26, 0x01	; 1
     646:	7c 91       	ld	r23, X
     648:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     64a:	12 96       	adiw	r26, 0x02	; 2
     64c:	8c 91       	ld	r24, X
     64e:	12 97       	sbiw	r26, 0x02	; 2
     650:	13 96       	adiw	r26, 0x03	; 3
     652:	9c 91       	ld	r25, X
     654:	08 95       	ret

00000656 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     656:	80 91 6c 16 	lds	r24, 0x166C
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	2b e0       	ldi	r18, 0x0B	; 11
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	82 9f       	mul	r24, r18
     662:	f0 01       	movw	r30, r0
     664:	83 9f       	mul	r24, r19
     666:	f0 0d       	add	r31, r0
     668:	92 9f       	mul	r25, r18
     66a:	f0 0d       	add	r31, r0
     66c:	11 24       	eor	r1, r1
     66e:	e5 59       	subi	r30, 0x95	; 149
     670:	f9 4e       	sbci	r31, 0xE9	; 233
     672:	df 01       	movw	r26, r30
     674:	18 96       	adiw	r26, 0x08	; 8
     676:	60 85       	ldd	r22, Z+8	; 0x08
     678:	11 96       	adiw	r26, 0x01	; 1
     67a:	7c 91       	ld	r23, X
     67c:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     67e:	12 96       	adiw	r26, 0x02	; 2
     680:	8c 91       	ld	r24, X
     682:	12 97       	sbiw	r26, 0x02	; 2
     684:	13 96       	adiw	r26, 0x03	; 3
     686:	9c 91       	ld	r25, X
     688:	08 95       	ret

0000068a <trtTerminate>:

void trtTerminate(void) {

  cli();
     68a:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     68c:	80 91 6c 16 	lds	r24, 0x166C
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	2b e0       	ldi	r18, 0x0B	; 11
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	82 9f       	mul	r24, r18
     698:	f0 01       	movw	r30, r0
     69a:	83 9f       	mul	r24, r19
     69c:	f0 0d       	add	r31, r0
     69e:	92 9f       	mul	r25, r18
     6a0:	f0 0d       	add	r31, r0
     6a2:	11 24       	eor	r1, r1
     6a4:	e5 59       	subi	r30, 0x95	; 149
     6a6:	f9 4e       	sbci	r31, 0xE9	; 233
     6a8:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6aa:	0e 94 87 00 	call	0x10e	; 0x10e <__vector_13>
}
     6ae:	08 95       	ret

000006b0 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     6b0:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     6b2:	e8 2f       	mov	r30, r24
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	ed 55       	subi	r30, 0x5D	; 93
     6b8:	f9 4e       	sbci	r31, 0xE9	; 233
  temp = *s ;
     6ba:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     6bc:	88 23       	and	r24, r24
     6be:	19 f0       	breq	.+6      	; 0x6c6 <trtAccept+0x16>
    (*s)--;
     6c0:	81 50       	subi	r24, 0x01	; 1
     6c2:	80 83       	st	Z, r24
     6c4:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     6c6:	78 94       	sei
  return temp ;
}
     6c8:	08 95       	ret

000006ca <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     6ca:	87 e6       	ldi	r24, 0x67	; 103
     6cc:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     6d0:	e1 ec       	ldi	r30, 0xC1	; 193
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	88 e1       	ldi	r24, 0x18	; 24
     6d6:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     6d8:	10 92 b2 0d 	sts	0x0DB2, r1
     6dc:	10 92 b1 0d 	sts	0x0DB1, r1
  tx_out = 0;
     6e0:	10 92 b4 0d 	sts	0x0DB4, r1
     6e4:	10 92 b3 0d 	sts	0x0DB3, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     6e8:	80 81       	ld	r24, Z
     6ea:	80 68       	ori	r24, 0x80	; 128
     6ec:	80 83       	st	Z, r24
}
     6ee:	08 95       	ret

000006f0 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	0b b6       	in	r0, 0x3b	; 59
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	ef 93       	push	r30
     708:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     70a:	20 91 b1 0d 	lds	r18, 0x0DB1
     70e:	30 91 b2 0d 	lds	r19, 0x0DB2
     712:	80 91 b3 0d 	lds	r24, 0x0DB3
     716:	90 91 b4 0d 	lds	r25, 0x0DB4
     71a:	28 17       	cp	r18, r24
     71c:	39 07       	cpc	r19, r25
     71e:	31 f4       	brne	.+12     	; 0x72c <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     720:	80 91 c1 00 	lds	r24, 0x00C1
     724:	8f 7d       	andi	r24, 0xDF	; 223
     726:	80 93 c1 00 	sts	0x00C1, r24
     72a:	1d c0       	rjmp	.+58     	; 0x766 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     72c:	e0 91 b3 0d 	lds	r30, 0x0DB3
     730:	f0 91 b4 0d 	lds	r31, 0x0DB4
     734:	eb 54       	subi	r30, 0x4B	; 75
     736:	f2 4f       	sbci	r31, 0xF2	; 242
     738:	80 81       	ld	r24, Z
     73a:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     73e:	80 91 b3 0d 	lds	r24, 0x0DB3
     742:	90 91 b4 0d 	lds	r25, 0x0DB4
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	90 93 b4 0d 	sts	0x0DB4, r25
     74c:	80 93 b3 0d 	sts	0x0DB3, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     750:	80 91 b3 0d 	lds	r24, 0x0DB3
     754:	90 91 b4 0d 	lds	r25, 0x0DB4
     758:	88 3c       	cpi	r24, 0xC8	; 200
     75a:	91 05       	cpc	r25, r1
     75c:	21 f4       	brne	.+8      	; 0x766 <__vector_21+0x76>
     75e:	10 92 b4 0d 	sts	0x0DB4, r1
     762:	10 92 b3 0d 	sts	0x0DB3, r1
  }
}
     766:	ff 91       	pop	r31
     768:	ef 91       	pop	r30
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	3f 91       	pop	r19
     770:	2f 91       	pop	r18
     772:	0f 90       	pop	r0
     774:	0b be       	out	0x3b, r0	; 59
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	0f 90       	pop	r0
     77c:	1f 90       	pop	r1
     77e:	18 95       	reti

00000780 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     780:	1f 93       	push	r17
     782:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     784:	8a 30       	cpi	r24, 0x0A	; 10
     786:	19 f4       	brne	.+6      	; 0x78e <uart_putchar+0xe>
     788:	8d e0       	ldi	r24, 0x0D	; 13
     78a:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
  char i = tx_in;
     78e:	80 91 b1 0d 	lds	r24, 0x0DB1
     792:	90 91 b2 0d 	lds	r25, 0x0DB2
  i++;
     796:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     798:	88 3c       	cpi	r24, 0xC8	; 200
     79a:	09 f4       	brne	.+2      	; 0x79e <uart_putchar+0x1e>
     79c:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     79e:	e0 91 b1 0d 	lds	r30, 0x0DB1
     7a2:	f0 91 b2 0d 	lds	r31, 0x0DB2
     7a6:	eb 54       	subi	r30, 0x4B	; 75
     7a8:	f2 4f       	sbci	r31, 0xF2	; 242
     7aa:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     7ac:	28 2f       	mov	r18, r24
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	80 91 b3 0d 	lds	r24, 0x0DB3
     7b4:	90 91 b4 0d 	lds	r25, 0x0DB4
     7b8:	28 17       	cp	r18, r24
     7ba:	39 07       	cpc	r19, r25
     7bc:	c9 f3       	breq	.-14     	; 0x7b0 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     7be:	30 93 b2 0d 	sts	0x0DB2, r19
     7c2:	20 93 b1 0d 	sts	0x0DB1, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     7c6:	80 91 c1 00 	lds	r24, 0x00C1
     7ca:	80 62       	ori	r24, 0x20	; 32
     7cc:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	1f 91       	pop	r17
     7d6:	08 95       	ret

000007d8 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     7d8:	1f 92       	push	r1
     7da:	0f 92       	push	r0
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	0f 92       	push	r0
     7e0:	0b b6       	in	r0, 0x3b	; 59
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	2f 93       	push	r18
     7e8:	3f 93       	push	r19
     7ea:	4f 93       	push	r20
     7ec:	5f 93       	push	r21
     7ee:	6f 93       	push	r22
     7f0:	7f 93       	push	r23
     7f2:	8f 93       	push	r24
     7f4:	9f 93       	push	r25
     7f6:	af 93       	push	r26
     7f8:	bf 93       	push	r27
     7fa:	ef 93       	push	r30
     7fc:	ff 93       	push	r31
	trt_rx_c = UDR0;
     7fe:	80 91 c6 00 	lds	r24, 0x00C6
     802:	80 93 b4 16 	sts	0x16B4, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	0e 94 8f 02 	call	0x51e	; 0x51e <trtSignal>
}
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0b be       	out	0x3b, r0	; 59
     828:	0f 90       	pop	r0
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	0f 90       	pop	r0
     82e:	1f 90       	pop	r1
     830:	18 95       	reti

00000832 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     840:	80 91 c7 09 	lds	r24, 0x09C7
     844:	90 91 c8 09 	lds	r25, 0x09C8
     848:	89 2b       	or	r24, r25
     84a:	09 f0       	breq	.+2      	; 0x84e <uart_getchar+0x1c>
     84c:	a1 c0       	rjmp	.+322    	; 0x990 <uart_getchar+0x15e>
     84e:	09 ec       	ldi	r16, 0xC9	; 201
     850:	19 e0       	ldi	r17, 0x09	; 9
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 6f 02 	call	0x4de	; 0x4de <trtWait>
	if (UCSR0A & _BV(FE0))
     858:	80 91 c0 00 	lds	r24, 0x00C0
     85c:	84 ff       	sbrs	r24, 4
     85e:	03 c0       	rjmp	.+6      	; 0x866 <uart_getchar+0x34>
     860:	2e ef       	ldi	r18, 0xFE	; 254
     862:	3f ef       	ldi	r19, 0xFF	; 255
     864:	a9 c0       	rjmp	.+338    	; 0x9b8 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     866:	80 91 c0 00 	lds	r24, 0x00C0
     86a:	83 fd       	sbrc	r24, 3
     86c:	a3 c0       	rjmp	.+326    	; 0x9b4 <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     86e:	90 91 b4 16 	lds	r25, 0x16B4

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     872:	9d 30       	cpi	r25, 0x0D	; 13
     874:	11 f0       	breq	.+4      	; 0x87a <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     876:	9a 30       	cpi	r25, 0x0A	; 10
     878:	81 f4       	brne	.+32     	; 0x89a <uart_getchar+0x68>
	  {
	    *cp = c;
     87a:	8a e0       	ldi	r24, 0x0A	; 10
     87c:	f8 01       	movw	r30, r16
     87e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     880:	b7 01       	movw	r22, r14
     882:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
	    rxp = b;
     886:	89 ec       	ldi	r24, 0xC9	; 201
     888:	99 e0       	ldi	r25, 0x09	; 9
     88a:	90 93 c8 09 	sts	0x09C8, r25
     88e:	80 93 c7 09 	sts	0x09C7, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	0e 94 8f 02 	call	0x51e	; 0x51e <trtSignal>
     898:	7b c0       	rjmp	.+246    	; 0x990 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     89a:	99 30       	cpi	r25, 0x09	; 9
     89c:	09 f4       	brne	.+2      	; 0x8a0 <uart_getchar+0x6e>
     89e:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     8a0:	89 2f       	mov	r24, r25
     8a2:	80 52       	subi	r24, 0x20	; 32
     8a4:	8f 35       	cpi	r24, 0x5F	; 95
     8a6:	10 f0       	brcs	.+4      	; 0x8ac <uart_getchar+0x7a>
     8a8:	90 3a       	cpi	r25, 0xA0	; 160
     8aa:	70 f0       	brcs	.+28     	; 0x8c8 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     8ac:	fd e0       	ldi	r31, 0x0D	; 13
     8ae:	00 3b       	cpi	r16, 0xB0	; 176
     8b0:	1f 07       	cpc	r17, r31
     8b2:	11 f4       	brne	.+4      	; 0x8b8 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     8b4:	87 e0       	ldi	r24, 0x07	; 7
     8b6:	04 c0       	rjmp	.+8      	; 0x8c0 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     8b8:	f8 01       	movw	r30, r16
     8ba:	91 93       	st	Z+, r25
     8bc:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     8be:	89 2f       	mov	r24, r25
     8c0:	b7 01       	movw	r22, r14
     8c2:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
     8c6:	c5 cf       	rjmp	.-118    	; 0x852 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     8c8:	92 31       	cpi	r25, 0x12	; 18
     8ca:	39 f1       	breq	.+78     	; 0x91a <uart_getchar+0xe8>
     8cc:	93 31       	cpi	r25, 0x13	; 19
     8ce:	38 f4       	brcc	.+14     	; 0x8de <uart_getchar+0xac>
     8d0:	93 30       	cpi	r25, 0x03	; 3
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <uart_getchar+0xa4>
     8d4:	6f c0       	rjmp	.+222    	; 0x9b4 <uart_getchar+0x182>
     8d6:	98 30       	cpi	r25, 0x08	; 8
     8d8:	09 f0       	breq	.+2      	; 0x8dc <uart_getchar+0xaa>
     8da:	bb cf       	rjmp	.-138    	; 0x852 <uart_getchar+0x20>
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <uart_getchar+0xbe>
     8de:	97 31       	cpi	r25, 0x17	; 23
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <uart_getchar+0xb2>
     8e2:	4b c0       	rjmp	.+150    	; 0x97a <uart_getchar+0x148>
     8e4:	9f 37       	cpi	r25, 0x7F	; 127
     8e6:	21 f0       	breq	.+8      	; 0x8f0 <uart_getchar+0xbe>
     8e8:	95 31       	cpi	r25, 0x15	; 21
     8ea:	09 f0       	breq	.+2      	; 0x8ee <uart_getchar+0xbc>
     8ec:	b2 cf       	rjmp	.-156    	; 0x852 <uart_getchar+0x20>
     8ee:	32 c0       	rjmp	.+100    	; 0x954 <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     8f0:	f9 e0       	ldi	r31, 0x09	; 9
     8f2:	09 3c       	cpi	r16, 0xC9	; 201
     8f4:	1f 07       	cpc	r17, r31
     8f6:	09 f0       	breq	.+2      	; 0x8fa <uart_getchar+0xc8>
     8f8:	08 f4       	brcc	.+2      	; 0x8fc <uart_getchar+0xca>
     8fa:	ab cf       	rjmp	.-170    	; 0x852 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     8fc:	88 e0       	ldi	r24, 0x08	; 8
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
		uart_putchar(' ', stream);
     904:	80 e2       	ldi	r24, 0x20	; 32
     906:	b7 01       	movw	r22, r14
     908:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
		uart_putchar('\b', stream);
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
		cp--;
     914:	01 50       	subi	r16, 0x01	; 1
     916:	10 40       	sbci	r17, 0x00	; 0
     918:	9c cf       	rjmp	.-200    	; 0x852 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     91a:	8d e0       	ldi	r24, 0x0D	; 13
     91c:	b7 01       	movw	r22, r14
     91e:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
     922:	c9 ec       	ldi	r28, 0xC9	; 201
     924:	d9 e0       	ldi	r29, 0x09	; 9
     926:	04 c0       	rjmp	.+8      	; 0x930 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     928:	89 91       	ld	r24, Y+
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     930:	c0 17       	cp	r28, r16
     932:	d1 07       	cpc	r29, r17
     934:	c8 f3       	brcs	.-14     	; 0x928 <uart_getchar+0xf6>
     936:	8d cf       	rjmp	.-230    	; 0x852 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	b7 01       	movw	r22, r14
     93c:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
		uart_putchar(' ', stream);
     940:	80 e2       	ldi	r24, 0x20	; 32
     942:	b7 01       	movw	r22, r14
     944:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
		uart_putchar('\b', stream);
     948:	88 e0       	ldi	r24, 0x08	; 8
     94a:	b7 01       	movw	r22, r14
     94c:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
		cp--;
     950:	01 50       	subi	r16, 0x01	; 1
     952:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     954:	89 e0       	ldi	r24, 0x09	; 9
     956:	09 3c       	cpi	r16, 0xC9	; 201
     958:	18 07       	cpc	r17, r24
     95a:	09 f0       	breq	.+2      	; 0x95e <uart_getchar+0x12c>
     95c:	68 f7       	brcc	.-38     	; 0x938 <uart_getchar+0x106>
     95e:	79 cf       	rjmp	.-270    	; 0x852 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     960:	88 e0       	ldi	r24, 0x08	; 8
     962:	b7 01       	movw	r22, r14
     964:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
		uart_putchar(' ', stream);
     968:	80 e2       	ldi	r24, 0x20	; 32
     96a:	b7 01       	movw	r22, r14
     96c:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
		uart_putchar('\b', stream);
     970:	88 e0       	ldi	r24, 0x08	; 8
     972:	b7 01       	movw	r22, r14
     974:	0e 94 c0 03 	call	0x780	; 0x780 <uart_putchar>
     978:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     97a:	e9 e0       	ldi	r30, 0x09	; 9
     97c:	09 3c       	cpi	r16, 0xC9	; 201
     97e:	1e 07       	cpc	r17, r30
     980:	09 f0       	breq	.+2      	; 0x984 <uart_getchar+0x152>
     982:	08 f4       	brcc	.+2      	; 0x986 <uart_getchar+0x154>
     984:	66 cf       	rjmp	.-308    	; 0x852 <uart_getchar+0x20>
     986:	e8 01       	movw	r28, r16
     988:	8a 91       	ld	r24, -Y
     98a:	80 32       	cpi	r24, 0x20	; 32
     98c:	49 f7       	brne	.-46     	; 0x960 <uart_getchar+0x12e>
     98e:	61 cf       	rjmp	.-318    	; 0x852 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     990:	e0 91 c7 09 	lds	r30, 0x09C7
     994:	f0 91 c8 09 	lds	r31, 0x09C8
     998:	81 91       	ld	r24, Z+
     99a:	f0 93 c8 09 	sts	0x09C8, r31
     99e:	e0 93 c7 09 	sts	0x09C7, r30
  if (c == '\n')
     9a2:	8a 30       	cpi	r24, 0x0A	; 10
     9a4:	21 f4       	brne	.+8      	; 0x9ae <uart_getchar+0x17c>
    rxp = 0;
     9a6:	10 92 c8 09 	sts	0x09C8, r1
     9aa:	10 92 c7 09 	sts	0x09C7, r1

  return c;
     9ae:	28 2f       	mov	r18, r24
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <uart_getchar+0x186>
     9b4:	2f ef       	ldi	r18, 0xFF	; 255
     9b6:	3f ef       	ldi	r19, 0xFF	; 255
}
     9b8:	c9 01       	movw	r24, r18
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	08 95       	ret

000009c8 <WS2811RGB>:
#define PAUSE  1000     // msec
#define DELAY    10	// msec
#define COUNT_INDEX  37
 
// Define the output function, using pin 0 on port a.
DEFINE_WS2811_FN(WS2811RGB, PORTA, 0)
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	eb 01       	movw	r28, r22
     9ce:	fc 01       	movw	r30, r24
     9d0:	c1 15       	cp	r28, r1
     9d2:	d1 05       	cpc	r29, r1
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <WS2811RGB+0x10>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <WS2811RGB+0xc6>
     9d8:	21 91       	ld	r18, Z+
     9da:	31 91       	ld	r19, Z+
     9dc:	41 91       	ld	r20, Z+
     9de:	b8 e0       	ldi	r27, 0x08	; 8
     9e0:	af b7       	in	r26, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	10 9a       	sbi	0x02, 0	; 2
     9e6:	37 fd       	sbrc	r19, 7
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <WS2811RGB+0x24>
     9ea:	10 98       	cbi	0x02, 0	; 2
     9ec:	37 fd       	sbrc	r19, 7
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <WS2811RGB+0x28>
	...
     9fc:	33 0f       	add	r19, r19
     9fe:	ba 95       	dec	r27
     a00:	10 98       	cbi	0x02, 0	; 2
     a02:	81 f7       	brne	.-32     	; 0x9e4 <WS2811RGB+0x1c>
     a04:	b7 e0       	ldi	r27, 0x07	; 7
     a06:	10 9a       	sbi	0x02, 0	; 2
     a08:	27 fd       	sbrc	r18, 7
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <WS2811RGB+0x46>
     a0c:	10 98       	cbi	0x02, 0	; 2
     a0e:	27 fd       	sbrc	r18, 7
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <WS2811RGB+0x4a>
	...
     a1e:	22 0f       	add	r18, r18
     a20:	ba 95       	dec	r27
     a22:	10 98       	cbi	0x02, 0	; 2
     a24:	81 f7       	brne	.-32     	; 0xa06 <WS2811RGB+0x3e>
     a26:	00 00       	nop
     a28:	10 9a       	sbi	0x02, 0	; 2
     a2a:	27 fd       	sbrc	r18, 7
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <WS2811RGB+0x68>
     a2e:	10 98       	cbi	0x02, 0	; 2
     a30:	27 fd       	sbrc	r18, 7
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <WS2811RGB+0x6c>
     a34:	00 00       	nop
     a36:	00 00       	nop
     a38:	00 00       	nop
     a3a:	21 91       	ld	r18, Z+
     a3c:	31 91       	ld	r19, Z+
     a3e:	b7 e0       	ldi	r27, 0x07	; 7
     a40:	10 98       	cbi	0x02, 0	; 2
     a42:	00 00       	nop
     a44:	00 00       	nop
     a46:	10 9a       	sbi	0x02, 0	; 2
     a48:	47 fd       	sbrc	r20, 7
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <WS2811RGB+0x86>
     a4c:	10 98       	cbi	0x02, 0	; 2
     a4e:	47 fd       	sbrc	r20, 7
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <WS2811RGB+0x8a>
	...
     a5e:	44 0f       	add	r20, r20
     a60:	ba 95       	dec	r27
     a62:	10 98       	cbi	0x02, 0	; 2
     a64:	81 f7       	brne	.-32     	; 0xa46 <WS2811RGB+0x7e>
     a66:	00 00       	nop
     a68:	10 9a       	sbi	0x02, 0	; 2
     a6a:	47 fd       	sbrc	r20, 7
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <WS2811RGB+0xa8>
     a6e:	10 98       	cbi	0x02, 0	; 2
     a70:	47 fd       	sbrc	r20, 7
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <WS2811RGB+0xac>
     a74:	00 00       	nop
     a76:	00 00       	nop
     a78:	b8 e0       	ldi	r27, 0x08	; 8
     a7a:	21 97       	sbiw	r28, 0x01	; 1
     a7c:	19 f0       	breq	.+6      	; 0xa84 <WS2811RGB+0xbc>
     a7e:	41 91       	ld	r20, Z+
     a80:	10 98       	cbi	0x02, 0	; 2
     a82:	b0 cf       	rjmp	.-160    	; 0x9e4 <WS2811RGB+0x1c>
     a84:	00 00       	nop
     a86:	10 98       	cbi	0x02, 0	; 2
     a88:	00 00       	nop
     a8a:	00 00       	nop
     a8c:	af bf       	out	0x3f, r26	; 63
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <generatePWM>:


char go = 0;

// --- define task 1  ----------------------------------------
void generatePWM(void* args) {
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
	long dead;
	
	while (1) {

    	//RGB_t *rgb = lookup_table[chord_idx];
		WS2811RGB(lookup_table[chord_idx], 16);
     aa0:	c0 e3       	ldi	r28, 0x30	; 48
     aa2:	d0 e0       	ldi	r29, 0x00	; 0
     aa4:	80 91 c4 09 	lds	r24, 0x09C4
     aa8:	90 91 c5 09 	lds	r25, 0x09C5
     aac:	9c 01       	movw	r18, r24
     aae:	2c 9f       	mul	r18, r28
     ab0:	c0 01       	movw	r24, r0
     ab2:	2d 9f       	mul	r18, r29
     ab4:	90 0d       	add	r25, r0
     ab6:	3c 9f       	mul	r19, r28
     ab8:	90 0d       	add	r25, r0
     aba:	11 24       	eor	r1, r1
     abc:	8c 5e       	subi	r24, 0xEC	; 236
     abe:	9e 4f       	sbci	r25, 0xFE	; 254
     ac0:	60 e1       	ldi	r22, 0x10	; 16
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <WS2811RGB>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     ac8:	20 91 ac 16 	lds	r18, 0x16AC
     acc:	30 91 ad 16 	lds	r19, 0x16AD
     ad0:	40 91 ae 16 	lds	r20, 0x16AE
     ad4:	50 91 af 16 	lds	r21, 0x16AF
     ad8:	a9 01       	movw	r20, r18
     ada:	33 27       	eor	r19, r19
     adc:	22 27       	eor	r18, r18
     ade:	60 91 84 00 	lds	r22, 0x0084
     ae2:	70 91 85 00 	lds	r23, 0x0085
		//RGB_t rgb[4] = {{0, INTENS, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
    	//WS2811RGB(rgb, ARRAYLEN(rgb));

		rel = trtCurrentTime() + SECONDS2TICKS(0.01);
		dead = trtCurrentTime() + SECONDS2TICKS(0.01);
		trtSleepUntil(rel, dead);
     ae6:	e0 90 84 00 	lds	r14, 0x0084
     aea:	f0 90 85 00 	lds	r15, 0x0085
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	62 0f       	add	r22, r18
     af4:	73 1f       	adc	r23, r19
     af6:	84 1f       	adc	r24, r20
     af8:	95 1f       	adc	r25, r21
     afa:	64 56       	subi	r22, 0x64	; 100
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	8f 4f       	sbci	r24, 0xFF	; 255
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	00 e0       	ldi	r16, 0x00	; 0
     b04:	10 e0       	ldi	r17, 0x00	; 0
     b06:	2e 0d       	add	r18, r14
     b08:	3f 1d       	adc	r19, r15
     b0a:	40 1f       	adc	r20, r16
     b0c:	51 1f       	adc	r21, r17
     b0e:	24 56       	subi	r18, 0x64	; 100
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	4f 4f       	sbci	r20, 0xFF	; 255
     b14:	5f 4f       	sbci	r21, 0xFF	; 255
     b16:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <trtSleepUntil>
     b1a:	c4 cf       	rjmp	.-120    	; 0xaa4 <generatePWM+0x10>

00000b1c <__vector_32>:
		}
	}
}

// timer 3 compare match isr
ISR (TIMER3_COMPA_vect) {
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	0b b6       	in	r0, 0x3b	; 59
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	8f 93       	push	r24
     b30:	9f 93       	push	r25
     b32:	ef 93       	push	r30
     b34:	ff 93       	push	r31
	if(go == 2) {
     b36:	80 91 c6 09 	lds	r24, 0x09C6
     b3a:	82 30       	cpi	r24, 0x02	; 2
     b3c:	e9 f5       	brne	.+122    	; 0xbb8 <__vector_32+0x9c>
		if(count < time_sig) {
     b3e:	20 91 69 16 	lds	r18, 0x1669
     b42:	30 91 6a 16 	lds	r19, 0x166A
     b46:	80 91 81 0e 	lds	r24, 0x0E81
     b4a:	90 91 82 0e 	lds	r25, 0x0E82
     b4e:	28 17       	cp	r18, r24
     b50:	39 07       	cpc	r19, r25
     b52:	6c f4       	brge	.+26     	; 0xb6e <__vector_32+0x52>
			chord_idx = COUNT_INDEX + count;
     b54:	2b 5d       	subi	r18, 0xDB	; 219
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
     b58:	30 93 c5 09 	sts	0x09C5, r19
     b5c:	20 93 c4 09 	sts	0x09C4, r18
			count++;
     b60:	24 52       	subi	r18, 0x24	; 36
     b62:	30 40       	sbci	r19, 0x00	; 0
     b64:	30 93 6a 16 	sts	0x166A, r19
     b68:	20 93 69 16 	sts	0x1669, r18
     b6c:	2b c0       	rjmp	.+86     	; 0xbc4 <__vector_32+0xa8>
		} else {
			chord_idx = song[song_idx];
     b6e:	e0 91 c2 09 	lds	r30, 0x09C2
     b72:	f0 91 c3 09 	lds	r31, 0x09C3
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
     b7a:	ed 57       	subi	r30, 0x7D	; 125
     b7c:	f1 4f       	sbci	r31, 0xF1	; 241
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	90 93 c5 09 	sts	0x09C5, r25
     b86:	80 93 c4 09 	sts	0x09C4, r24

			if(chord_idx == -1) {
     b8a:	80 91 c4 09 	lds	r24, 0x09C4
     b8e:	90 91 c5 09 	lds	r25, 0x09C5
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	31 f4       	brne	.+12     	; 0xba4 <__vector_32+0x88>
				go = 0;
     b98:	10 92 c6 09 	sts	0x09C6, r1
				chord_idx = 0;
     b9c:	10 92 c5 09 	sts	0x09C5, r1
     ba0:	10 92 c4 09 	sts	0x09C4, r1
			}
			
			song_idx++;
     ba4:	80 91 c2 09 	lds	r24, 0x09C2
     ba8:	90 91 c3 09 	lds	r25, 0x09C3
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	90 93 c3 09 	sts	0x09C3, r25
     bb2:	80 93 c2 09 	sts	0x09C2, r24
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <__vector_32+0xa8>
		}
	} else if (!go) {
     bb8:	88 23       	and	r24, r24
     bba:	21 f4       	brne	.+8      	; 0xbc4 <__vector_32+0xa8>
		chord_idx = 0;
     bbc:	10 92 c5 09 	sts	0x09C5, r1
     bc0:	10 92 c4 09 	sts	0x09C4, r1
	}
}
     bc4:	ff 91       	pop	r31
     bc6:	ef 91       	pop	r30
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	3f 91       	pop	r19
     bce:	2f 91       	pop	r18
     bd0:	0f 90       	pop	r0
     bd2:	0b be       	out	0x3b, r0	; 59
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	0f 90       	pop	r0
     bda:	1f 90       	pop	r1
     bdc:	18 95       	reti

00000bde <main>:

// --- Main Program ----------------------------------
int main(void) {
     bde:	cf 92       	push	r12
     be0:	df 92       	push	r13
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17

  // setup neopixel driver
  SET_BIT_HI(DDRA, 0);
     bea:	08 9a       	sbi	0x01, 0	; 1
  SET_BIT_LO(PORTA, 0);
     bec:	10 98       	cbi	0x02, 0	; 2

  // setup timer 3
  //TCCR3A = (1<<WGM32); // ctc
  TCCR3B = (1<<WGM32) + 0x04; // prescale by 256
     bee:	8c e0       	ldi	r24, 0x0C	; 12
     bf0:	80 93 91 00 	sts	0x0091, r24
  OCR3A = 10000; // 1 second (DEFAULT)
     bf4:	80 e1       	ldi	r24, 0x10	; 16
     bf6:	97 e2       	ldi	r25, 0x27	; 39
     bf8:	90 93 99 00 	sts	0x0099, r25
     bfc:	80 93 98 00 	sts	0x0098, r24
  TIMSK3= (1<<OCIE3A); // enable interrupt
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	80 93 71 00 	sts	0x0071, r24

  // setup LCD
  LCDinit();
     c06:	0e 94 0d 08 	call	0x101a	; 0x101a <LCDinit>
  LCDcursorOFF();
     c0a:	0e 94 75 08 	call	0x10ea	; 0x10ea <LCDcursorOFF>
  LCDclr();
     c0e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCDclr>
  LCDGotoXY(0,0);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	0e 94 c3 07 	call	0xf86	; 0xf86 <LCDGotoXY>

  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     c1e:	0e 94 65 03 	call	0x6ca	; 0x6ca <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     c22:	64 eb       	ldi	r22, 0xB4	; 180
     c24:	79 e0       	ldi	r23, 0x09	; 9
     c26:	70 93 ba 16 	sts	0x16BA, r23
     c2a:	60 93 b9 16 	sts	0x16B9, r22
     c2e:	70 93 b6 16 	sts	0x16B6, r23
     c32:	60 93 b5 16 	sts	0x16B5, r22
     c36:	70 93 b8 16 	sts	0x16B8, r23
     c3a:	60 93 b7 16 	sts	0x16B7, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 76 09 	call	0x12ec	; 0x12ec <fputs>

  // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     c46:	80 e5       	ldi	r24, 0x50	; 80
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 cb 01 	call	0x396	; 0x396 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c4e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c50:	10 92 a4 16 	sts	0x16A4, r1
  
  sei(); // set enabled interrupts;
     c54:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c56:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c58:	10 92 a5 16 	sts	0x16A5, r1
  
  sei(); // set enabled interrupts;
     c5c:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c5e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	80 93 a6 16 	sts	0x16A6, r24
  
  sei(); // set enabled interrupts;
     c66:	78 94       	sei
  
  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variables

 // --- creat tasks  ----------------
  trtCreateTask(generatePWM, 100, SECONDS2TICKS(1), SECONDS2TICKS(1), &(args[0]));
     c68:	8a e4       	ldi	r24, 0x4A	; 74
     c6a:	95 e0       	ldi	r25, 0x05	; 5
     c6c:	64 e6       	ldi	r22, 0x64	; 100
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	29 e0       	ldi	r18, 0x09	; 9
     c72:	3d e3       	ldi	r19, 0x3D	; 61
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	b9 e0       	ldi	r27, 0x09	; 9
     c7a:	eb 2e       	mov	r14, r27
     c7c:	bd e3       	ldi	r27, 0x3D	; 61
     c7e:	fb 2e       	mov	r15, r27
     c80:	01 2d       	mov	r16, r1
     c82:	11 2d       	mov	r17, r1
     c84:	ad e7       	ldi	r26, 0x7D	; 125
     c86:	ca 2e       	mov	r12, r26
     c88:	ae e0       	ldi	r26, 0x0E	; 14
     c8a:	da 2e       	mov	r13, r26
     c8c:	0e 94 09 02 	call	0x412	; 0x412 <trtCreateTask>
  trtCreateTask(serialComm, 100, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     c90:	84 ea       	ldi	r24, 0xA4	; 164
     c92:	96 e0       	ldi	r25, 0x06	; 6
     c94:	64 e6       	ldi	r22, 0x64	; 100
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	2a e1       	ldi	r18, 0x1A	; 26
     c9a:	36 e0       	ldi	r19, 0x06	; 6
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	fa e1       	ldi	r31, 0x1A	; 26
     ca2:	ef 2e       	mov	r14, r31
     ca4:	f6 e0       	ldi	r31, 0x06	; 6
     ca6:	ff 2e       	mov	r15, r31
     ca8:	01 2d       	mov	r16, r1
     caa:	11 2d       	mov	r17, r1
     cac:	ef e7       	ldi	r30, 0x7F	; 127
     cae:	ce 2e       	mov	r12, r30
     cb0:	ee e0       	ldi	r30, 0x0E	; 14
     cb2:	de 2e       	mov	r13, r30
     cb4:	0e 94 09 02 	call	0x412	; 0x412 <trtCreateTask>
  
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
     cb8:	83 b7       	in	r24, 0x33	; 51
     cba:	81 7f       	andi	r24, 0xF1	; 241
     cbc:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
     cbe:	83 b7       	in	r24, 0x33	; 51
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	83 bf       	out	0x33, r24	; 51
  while (1) {
  	sleep_cpu();
     cc4:	88 95       	sleep
     cc6:	fe cf       	rjmp	.-4      	; 0xcc4 <main+0xe6>

00000cc8 <strToSong>:
		dead = trtCurrentTime() + SECONDS2TICKS(0.01);
		trtSleepUntil(rel, dead);
	}
}

void strToSong(char *str, int *song) {
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <strToSong+0x16>
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	7c 01       	movw	r14, r24
     ce6:	6b 01       	movw	r12, r22
     ce8:	00 e0       	ldi	r16, 0x00	; 0
     cea:	10 e0       	ldi	r17, 0x00	; 0
	int song_idx = 0; 
	int str_idx = 0;
	while( str_idx < strlen( str ) ) {
		char buf[3];
		strncpy(buf, str + str_idx, 2);
     cec:	5e 01       	movw	r10, r28
     cee:	08 94       	sec
     cf0:	a1 1c       	adc	r10, r1
     cf2:	b1 1c       	adc	r11, r1
     cf4:	11 c0       	rjmp	.+34     	; 0xd18 <strToSong+0x50>
     cf6:	b7 01       	movw	r22, r14
     cf8:	60 0f       	add	r22, r16
     cfa:	71 1f       	adc	r23, r17
     cfc:	c5 01       	movw	r24, r10
     cfe:	42 e0       	ldi	r20, 0x02	; 2
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	0e 94 5f 09 	call	0x12be	; 0x12be <strncpy>
		song[song_idx++] = atoi(buf);
     d06:	c5 01       	movw	r24, r10
     d08:	0e 94 41 09 	call	0x1282	; 0x1282 <atoi>
     d0c:	f6 01       	movw	r30, r12
     d0e:	81 93       	st	Z+, r24
     d10:	91 93       	st	Z+, r25
     d12:	6f 01       	movw	r12, r30
		str_idx += 3;
     d14:	0d 5f       	subi	r16, 0xFD	; 253
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
}

void strToSong(char *str, int *song) {
	int song_idx = 0; 
	int str_idx = 0;
	while( str_idx < strlen( str ) ) {
     d18:	f7 01       	movw	r30, r14
     d1a:	01 90       	ld	r0, Z+
     d1c:	00 20       	and	r0, r0
     d1e:	e9 f7       	brne	.-6      	; 0xd1a <strToSong+0x52>
     d20:	31 97       	sbiw	r30, 0x01	; 1
     d22:	ee 19       	sub	r30, r14
     d24:	ff 09       	sbc	r31, r15
     d26:	0e 17       	cp	r16, r30
     d28:	1f 07       	cpc	r17, r31
     d2a:	28 f3       	brcs	.-54     	; 0xcf6 <strToSong+0x2e>
		strncpy(buf, str + str_idx, 2);
		song[song_idx++] = atoi(buf);
		str_idx += 3;
	}

}
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	08 95       	ret

00000d48 <serialComm>:

// --- define task 2  ----------------------------------------
void serialComm(void* args) {
     d48:	2f 92       	push	r2
     d4a:	3f 92       	push	r3
     d4c:	4f 92       	push	r4
     d4e:	5f 92       	push	r5
     d50:	6f 92       	push	r6
     d52:	7f 92       	push	r7
     d54:	8f 92       	push	r8
     d56:	9f 92       	push	r9
     d58:	af 92       	push	r10
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	c1 5f       	subi	r28, 0xF1	; 241
     d72:	d3 40       	sbci	r29, 0x03	; 3
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
	char cmd[1000];

	while(1)
	{
		//fscanf(stdin, "%s", cmd);
		gets(cmd);
     d7e:	8e 01       	movw	r16, r28
     d80:	06 5f       	subi	r16, 0xF6	; 246
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	5c e0       	ldi	r21, 0x0C	; 12
     d86:	85 2e       	mov	r8, r21
     d88:	91 2c       	mov	r9, r1
     d8a:	8c 0e       	add	r8, r28
     d8c:	9d 1e       	adc	r9, r29
				go = 1;
				continue;
			}

			char buf[4];
			strncpy(buf, cmd + 2, 3);
     d8e:	46 e0       	ldi	r20, 0x06	; 6
     d90:	a4 2e       	mov	r10, r20
     d92:	b1 2c       	mov	r11, r1
     d94:	ac 0e       	add	r10, r28
     d96:	bd 1e       	adc	r11, r29

			OCR3A = (62500 * 60) / bpm - 1;
			//OCR3A = 60000;

			char buf2[2];
			strncpy(buf2, cmd + 6, 1);
     d98:	6e 01       	movw	r12, r28
     d9a:	08 94       	sec
     d9c:	c1 1c       	adc	r12, r1
     d9e:	d1 1c       	adc	r13, r1
				time_sig = 1;
			}

			count = 0;
			
			strToSong(cmd + 8, song);
     da0:	32 e1       	ldi	r19, 0x12	; 18
     da2:	23 2e       	mov	r2, r19
     da4:	31 2c       	mov	r3, r1
     da6:	2c 0e       	add	r2, r28
     da8:	3d 1e       	adc	r3, r29
			bpm = atoi(buf);
			if (bpm < 60) {
				bpm = 60;
			}
			if (bpm > 240) {
				bpm = 240;
     daa:	20 ef       	ldi	r18, 0xF0	; 240
     dac:	42 2e       	mov	r4, r18
     dae:	51 2c       	mov	r5, r1
			char buf[4];
			strncpy(buf, cmd + 2, 3);
			
			bpm = atoi(buf);
			if (bpm < 60) {
				bpm = 60;
     db0:	9c e3       	ldi	r25, 0x3C	; 60
     db2:	69 2e       	mov	r6, r25
     db4:	71 2c       	mov	r7, r1
			LCDGotoXY(0, 0);
			LCDstring(cmd, strlen(cmd));

			if( cmd[0] == '1' ) {
				char buf3[3];
				strncpy(buf3, cmd + 2, 2);	
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	e8 2e       	mov	r14, r24
     dba:	f1 2c       	mov	r15, r1
     dbc:	ec 0e       	add	r14, r28
     dbe:	fd 1e       	adc	r15, r29
	char cmd[1000];

	while(1)
	{
		//fscanf(stdin, "%s", cmd);
		gets(cmd);
     dc0:	c8 01       	movw	r24, r16
     dc2:	0e 94 a1 09 	call	0x1342	; 0x1342 <gets>

		trtWait(SEM_STRING_DONE);
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	0e 94 6f 02 	call	0x4de	; 0x4de <trtWait>
			LCDGotoXY(0, 0);
			LCDstring(lcd_buffer, strlen(lcd_buffer));
			leds[0] = val;
		}*/
	
		if (go != 2) {
     dcc:	80 91 c6 09 	lds	r24, 0x09C6
     dd0:	82 30       	cpi	r24, 0x02	; 2
     dd2:	b1 f3       	breq	.-20     	; 0xdc0 <serialComm+0x78>
			LCDGotoXY(0, 0);
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	0e 94 c3 07 	call	0xf86	; 0xf86 <LCDGotoXY>
			LCDstring(cmd, strlen(cmd));
     de0:	f8 01       	movw	r30, r16
     de2:	01 90       	ld	r0, Z+
     de4:	00 20       	and	r0, r0
     de6:	e9 f7       	brne	.-6      	; 0xde2 <serialComm+0x9a>
     de8:	31 97       	sbiw	r30, 0x01	; 1
     dea:	e0 1b       	sub	r30, r16
     dec:	f1 0b       	sbc	r31, r17
     dee:	c8 01       	movw	r24, r16
     df0:	bf 01       	movw	r22, r30
     df2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <LCDstring>

			if( cmd[0] == '1' ) {
     df6:	8a 85       	ldd	r24, Y+10	; 0x0a
     df8:	81 33       	cpi	r24, 0x31	; 49
     dfa:	79 f4       	brne	.+30     	; 0xe1a <serialComm+0xd2>
				char buf3[3];
				strncpy(buf3, cmd + 2, 2);	
     dfc:	c7 01       	movw	r24, r14
     dfe:	b4 01       	movw	r22, r8
     e00:	42 e0       	ldi	r20, 0x02	; 2
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	0e 94 5f 09 	call	0x12be	; 0x12be <strncpy>
				chord_idx = atoi(buf3);
     e08:	c7 01       	movw	r24, r14
     e0a:	0e 94 41 09 	call	0x1282	; 0x1282 <atoi>
     e0e:	90 93 c5 09 	sts	0x09C5, r25
     e12:	80 93 c4 09 	sts	0x09C4, r24
				go = 1;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	58 c0       	rjmp	.+176    	; 0xeca <serialComm+0x182>
				continue;
			}

			char buf[4];
			strncpy(buf, cmd + 2, 3);
     e1a:	c5 01       	movw	r24, r10
     e1c:	b4 01       	movw	r22, r8
     e1e:	43 e0       	ldi	r20, 0x03	; 3
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	0e 94 5f 09 	call	0x12be	; 0x12be <strncpy>
			
			bpm = atoi(buf);
     e26:	c5 01       	movw	r24, r10
     e28:	0e 94 41 09 	call	0x1282	; 0x1282 <atoi>
     e2c:	90 93 68 16 	sts	0x1668, r25
     e30:	80 93 67 16 	sts	0x1667, r24
			if (bpm < 60) {
     e34:	cc 97       	sbiw	r24, 0x3c	; 60
     e36:	24 f4       	brge	.+8      	; 0xe40 <serialComm+0xf8>
				bpm = 60;
     e38:	70 92 68 16 	sts	0x1668, r7
     e3c:	60 92 67 16 	sts	0x1667, r6
			}
			if (bpm > 240) {
     e40:	80 91 67 16 	lds	r24, 0x1667
     e44:	90 91 68 16 	lds	r25, 0x1668
     e48:	81 3f       	cpi	r24, 0xF1	; 241
     e4a:	91 05       	cpc	r25, r1
     e4c:	24 f0       	brlt	.+8      	; 0xe56 <serialComm+0x10e>
				bpm = 240;
     e4e:	50 92 68 16 	sts	0x1668, r5
     e52:	40 92 67 16 	sts	0x1667, r4
			}

			OCR3A = (62500 * 60) / bpm - 1;
     e56:	20 91 67 16 	lds	r18, 0x1667
     e5a:	30 91 68 16 	lds	r19, 0x1668
     e5e:	44 27       	eor	r20, r20
     e60:	37 fd       	sbrc	r19, 7
     e62:	40 95       	com	r20
     e64:	54 2f       	mov	r21, r20
     e66:	60 e7       	ldi	r22, 0x70	; 112
     e68:	78 e3       	ldi	r23, 0x38	; 56
     e6a:	89 e3       	ldi	r24, 0x39	; 57
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 04 09 	call	0x1208	; 0x1208 <__divmodsi4>
     e72:	21 50       	subi	r18, 0x01	; 1
     e74:	30 40       	sbci	r19, 0x00	; 0
     e76:	30 93 99 00 	sts	0x0099, r19
     e7a:	20 93 98 00 	sts	0x0098, r18
			//OCR3A = 60000;

			char buf2[2];
			strncpy(buf2, cmd + 6, 1);
     e7e:	c6 01       	movw	r24, r12
     e80:	be 01       	movw	r22, r28
     e82:	60 5f       	subi	r22, 0xF0	; 240
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	0e 94 5f 09 	call	0x12be	; 0x12be <strncpy>
			time_sig = atoi(buf2);
     e8e:	c6 01       	movw	r24, r12
     e90:	0e 94 41 09 	call	0x1282	; 0x1282 <atoi>
     e94:	90 93 82 0e 	sts	0x0E82, r25
     e98:	80 93 81 0e 	sts	0x0E81, r24
			if (time_sig < 1) {
     e9c:	18 16       	cp	r1, r24
     e9e:	19 06       	cpc	r1, r25
     ea0:	34 f0       	brlt	.+12     	; 0xeae <serialComm+0x166>
				time_sig = 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	90 93 82 0e 	sts	0x0E82, r25
     eaa:	80 93 81 0e 	sts	0x0E81, r24
			}

			count = 0;
     eae:	10 92 6a 16 	sts	0x166A, r1
     eb2:	10 92 69 16 	sts	0x1669, r1
			
			strToSong(cmd + 8, song);
     eb6:	c1 01       	movw	r24, r2
     eb8:	63 e8       	ldi	r22, 0x83	; 131
     eba:	7e e0       	ldi	r23, 0x0E	; 14
     ebc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <strToSong>
			song_idx = 0;
     ec0:	10 92 c3 09 	sts	0x09C3, r1
     ec4:	10 92 c2 09 	sts	0x09C2, r1
			go = 2;
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	80 93 c6 09 	sts	0x09C6, r24
     ece:	78 cf       	rjmp	.-272    	; 0xdc0 <serialComm+0x78>

00000ed0 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     ed0:	28 2f       	mov	r18, r24
     ed2:	20 7f       	andi	r18, 0xF0	; 240
     ed4:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     ed6:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     ed8:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eda:	20 e4       	ldi	r18, 0x40	; 64
     edc:	3f e1       	ldi	r19, 0x1F	; 31
     ede:	f9 01       	movw	r30, r18
     ee0:	31 97       	sbiw	r30, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     ee4:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     ee6:	40 98       	cbi	0x08, 0	; 8
     ee8:	f9 01       	movw	r30, r18
     eea:	31 97       	sbiw	r30, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	44 e0       	ldi	r20, 0x04	; 4
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	4a 95       	dec	r20
     ef8:	e1 f7       	brne	.-8      	; 0xef2 <LCDsendChar+0x22>
     efa:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     efc:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     efe:	42 9a       	sbi	0x08, 2	; 8
     f00:	c9 01       	movw	r24, r18
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     f06:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     f08:	40 98       	cbi	0x08, 0	; 8
     f0a:	c9 01       	movw	r24, r18
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     f10:	08 95       	ret

00000f12 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     f12:	28 2f       	mov	r18, r24
     f14:	20 7f       	andi	r18, 0xF0	; 240
     f16:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     f18:	42 9a       	sbi	0x08, 2	; 8
     f1a:	20 e4       	ldi	r18, 0x40	; 64
     f1c:	3f e1       	ldi	r19, 0x1F	; 31
     f1e:	f9 01       	movw	r30, r18
     f20:	31 97       	sbiw	r30, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     f24:	42 98       	cbi	0x08, 2	; 8
     f26:	f9 01       	movw	r30, r18
     f28:	31 97       	sbiw	r30, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	54 e0       	ldi	r21, 0x04	; 4
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	5a 95       	dec	r21
     f36:	e1 f7       	brne	.-8      	; 0xf30 <LCDsendCommand+0x1e>
     f38:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     f3a:	42 9a       	sbi	0x08, 2	; 8
     f3c:	c9 01       	movw	r24, r18
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     f42:	42 98       	cbi	0x08, 2	; 8
     f44:	c9 01       	movw	r24, r18
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     f4a:	08 95       	ret

00000f4c <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
}
     f52:	08 95       	ret

00000f54 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
}
     f5a:	08 95       	ret

00000f5c <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	49 f0       	breq	.+18     	; 0xf7c <LCDstring+0x20>
     f6a:	ec 01       	movw	r28, r24
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     f70:	89 91       	ld	r24, Y+
     f72:	0e 94 68 07 	call	0xed0	; 0xed0 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     f76:	1f 5f       	subi	r17, 0xFF	; 255
     f78:	10 17       	cp	r17, r16
     f7a:	d0 f3       	brcs	.-12     	; 0xf70 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	08 95       	ret

00000f86 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     f86:	62 30       	cpi	r22, 0x02	; 2
     f88:	31 f0       	breq	.+12     	; 0xf96 <LCDGotoXY+0x10>
     f8a:	63 30       	cpi	r22, 0x03	; 3
     f8c:	31 f0       	breq	.+12     	; 0xf9a <LCDGotoXY+0x14>
     f8e:	61 30       	cpi	r22, 0x01	; 1
     f90:	29 f4       	brne	.+10     	; 0xf9c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     f92:	80 5c       	subi	r24, 0xC0	; 192
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     f96:	8c 5e       	subi	r24, 0xEC	; 236
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     f9a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     f9c:	80 68       	ori	r24, 0x80	; 128
     f9e:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
	
}
     fa2:	08 95       	ret

00000fa4 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	ec 01       	movw	r28, r24
     fac:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     fae:	64 2f       	mov	r22, r20
     fb0:	0e 94 c3 07 	call	0xf86	; 0xf86 <LCDGotoXY>
     fb4:	10 e0       	ldi	r17, 0x00	; 0
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     fb8:	0e 94 68 07 	call	0xed0	; 0xed0 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     fbc:	1f 5f       	subi	r17, 0xFF	; 255
     fbe:	fe 01       	movw	r30, r28
     fc0:	e1 0f       	add	r30, r17
     fc2:	f1 1d       	adc	r31, r1
     fc4:	84 91       	lpm	r24, Z+
     fc6:	88 23       	and	r24, r24
     fc8:	b9 f7       	brne	.-18     	; 0xfb8 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	08 95       	ret

00000fd2 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	7c 01       	movw	r14, r24
     fe0:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     fe2:	11 0f       	add	r17, r17
     fe4:	11 0f       	add	r17, r17
     fe6:	11 0f       	add	r17, r17
     fe8:	10 64       	ori	r17, 0x40	; 64
     fea:	c0 e0       	ldi	r28, 0x00	; 0
     fec:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     fee:	f7 01       	movw	r30, r14
     ff0:	ec 0f       	add	r30, r28
     ff2:	fd 1f       	adc	r31, r29
     ff4:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     ff6:	81 2f       	mov	r24, r17
     ff8:	8c 0f       	add	r24, r28
     ffa:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
		LCDsendChar(pcc);
     ffe:	80 2f       	mov	r24, r16
    1000:	0e 94 68 07 	call	0xed0	; 0xed0 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1004:	21 96       	adiw	r28, 0x01	; 1
    1006:	c8 30       	cpi	r28, 0x08	; 8
    1008:	d1 05       	cpc	r29, r1
    100a:	89 f7       	brne	.-30     	; 0xfee <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	08 95       	ret

0000101a <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	80 e6       	ldi	r24, 0x60	; 96
    1022:	9a ee       	ldi	r25, 0xEA	; 234
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    1028:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    102a:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    102c:	87 b1       	in	r24, 0x07	; 7
    102e:	80 6f       	ori	r24, 0xF0	; 240
    1030:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1032:	87 b1       	in	r24, 0x07	; 7
    1034:	87 60       	ori	r24, 0x07	; 7
    1036:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1038:	80 e3       	ldi	r24, 0x30	; 48
    103a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    103c:	42 9a       	sbi	0x08, 2	; 8
    103e:	20 e4       	ldi	r18, 0x40	; 64
    1040:	3f e1       	ldi	r19, 0x1F	; 31
    1042:	f9 01       	movw	r30, r18
    1044:	31 97       	sbiw	r30, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1048:	42 98       	cbi	0x08, 2	; 8
    104a:	f9 01       	movw	r30, r18
    104c:	31 97       	sbiw	r30, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1050:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1052:	42 9a       	sbi	0x08, 2	; 8
    1054:	c9 01       	movw	r24, r18
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    105a:	42 98       	cbi	0x08, 2	; 8
    105c:	c9 01       	movw	r24, r18
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1066:	42 9a       	sbi	0x08, 2	; 8
    1068:	c9 01       	movw	r24, r18
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    106e:	42 98       	cbi	0x08, 2	; 8
    1070:	c9 01       	movw	r24, r18
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1076:	88 e2       	ldi	r24, 0x28	; 40
    1078:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    107c:	8c e0       	ldi	r24, 0x0C	; 12
    107e:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
    1082:	cc e8       	ldi	r28, 0x8C	; 140
    1084:	d0 e0       	ldi	r29, 0x00	; 0
    1086:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1088:	16 2f       	mov	r17, r22
    108a:	1f 5f       	subi	r17, 0xFF	; 255
    108c:	ce 01       	movw	r24, r28
    108e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCDdefinechar>
    1092:	28 96       	adiw	r28, 0x08	; 8
    1094:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1096:	18 30       	cpi	r17, 0x08	; 8
    1098:	b9 f7       	brne	.-18     	; 0x1088 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	08 95       	ret

000010a2 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	08 2f       	mov	r16, r24
    10a8:	10 e0       	ldi	r17, 0x00	; 0
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    10ac:	8e e1       	ldi	r24, 0x1E	; 30
    10ae:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    10b2:	1f 5f       	subi	r17, 0xFF	; 255
    10b4:	10 17       	cp	r17, r16
    10b6:	d0 f3       	brcs	.-12     	; 0x10ac <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	08 95       	ret

000010be <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	08 2f       	mov	r16, r24
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    10c8:	88 e1       	ldi	r24, 0x18	; 24
    10ca:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    10ce:	1f 5f       	subi	r17, 0xFF	; 255
    10d0:	10 17       	cp	r17, r16
    10d2:	d0 f3       	brcs	.-12     	; 0x10c8 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    10da:	8e e0       	ldi	r24, 0x0E	; 14
    10dc:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
}
    10e0:	08 95       	ret

000010e2 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    10e2:	8f e0       	ldi	r24, 0x0F	; 15
    10e4:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
}
    10e8:	08 95       	ret

000010ea <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    10ea:	8c e0       	ldi	r24, 0x0C	; 12
    10ec:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
}
    10f0:	08 95       	ret

000010f2 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    10f2:	88 e0       	ldi	r24, 0x08	; 8
    10f4:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
}
    10f8:	08 95       	ret

000010fa <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    10fa:	8c e0       	ldi	r24, 0x0C	; 12
    10fc:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
}
    1100:	08 95       	ret

00001102 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	08 2f       	mov	r16, r24
    1108:	10 e0       	ldi	r17, 0x00	; 0
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    110c:	80 e1       	ldi	r24, 0x10	; 16
    110e:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1112:	1f 5f       	subi	r17, 0xFF	; 255
    1114:	10 17       	cp	r17, r16
    1116:	d0 f3       	brcs	.-12     	; 0x110c <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	08 2f       	mov	r16, r24
    1124:	10 e0       	ldi	r17, 0x00	; 0
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1128:	84 e1       	ldi	r24, 0x14	; 20
    112a:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    112e:	1f 5f       	subi	r17, 0xFF	; 255
    1130:	10 17       	cp	r17, r16
    1132:	d0 f3       	brcs	.-12     	; 0x1128 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    114a:	96 e0       	ldi	r25, 0x06	; 6
    114c:	89 9f       	mul	r24, r25
    114e:	c0 01       	movw	r24, r0
    1150:	11 24       	eor	r1, r1
    1152:	24 2f       	mov	r18, r20
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	ac 01       	movw	r20, r24
    1158:	42 9f       	mul	r20, r18
    115a:	c0 01       	movw	r24, r0
    115c:	43 9f       	mul	r20, r19
    115e:	90 0d       	add	r25, r0
    1160:	52 9f       	mul	r21, r18
    1162:	90 0d       	add	r25, r0
    1164:	11 24       	eor	r1, r1
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__divmodhi4>
    116c:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    116e:	cb 01       	movw	r24, r22
    1170:	66 e0       	ldi	r22, 0x06	; 6
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__udivmodhi4>
    1178:	e8 2e       	mov	r14, r24
    117a:	ff 24       	eor	r15, r15
    117c:	00 e0       	ldi	r16, 0x00	; 0
    117e:	10 e0       	ldi	r17, 0x00	; 0
    1180:	12 c0       	rjmp	.+36     	; 0x11a6 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1182:	c8 01       	movw	r24, r16
    1184:	05 96       	adiw	r24, 0x05	; 5
    1186:	c8 17       	cp	r28, r24
    1188:	d9 07       	cpc	r29, r25
    118a:	10 f0       	brcs	.+4      	; 0x1190 <LCDprogressBar+0x56>
    118c:	85 e0       	ldi	r24, 0x05	; 5
    118e:	06 c0       	rjmp	.+12     	; 0x119c <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1190:	c0 17       	cp	r28, r16
    1192:	d1 07       	cpc	r29, r17
    1194:	10 f0       	brcs	.+4      	; 0x119a <LCDprogressBar+0x60>
    1196:	8e 2d       	mov	r24, r14
    1198:	01 c0       	rjmp	.+2      	; 0x119c <LCDprogressBar+0x62>
    119a:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    119c:	0e 94 68 07 	call	0xed0	; 0xed0 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    11a0:	f3 94       	inc	r15
    11a2:	0a 5f       	subi	r16, 0xFA	; 250
    11a4:	1f 4f       	sbci	r17, 0xFF	; 255
    11a6:	fd 14       	cp	r15, r13
    11a8:	60 f3       	brcs	.-40     	; 0x1182 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	df 90       	pop	r13
    11b8:	08 95       	ret

000011ba <__udivmodhi4>:
    11ba:	aa 1b       	sub	r26, r26
    11bc:	bb 1b       	sub	r27, r27
    11be:	51 e1       	ldi	r21, 0x11	; 17
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <__udivmodhi4_ep>

000011c2 <__udivmodhi4_loop>:
    11c2:	aa 1f       	adc	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	a6 17       	cp	r26, r22
    11c8:	b7 07       	cpc	r27, r23
    11ca:	10 f0       	brcs	.+4      	; 0x11d0 <__udivmodhi4_ep>
    11cc:	a6 1b       	sub	r26, r22
    11ce:	b7 0b       	sbc	r27, r23

000011d0 <__udivmodhi4_ep>:
    11d0:	88 1f       	adc	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	5a 95       	dec	r21
    11d6:	a9 f7       	brne	.-22     	; 0x11c2 <__udivmodhi4_loop>
    11d8:	80 95       	com	r24
    11da:	90 95       	com	r25
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	08 95       	ret

000011e2 <__divmodhi4>:
    11e2:	97 fb       	bst	r25, 7
    11e4:	09 2e       	mov	r0, r25
    11e6:	07 26       	eor	r0, r23
    11e8:	0a d0       	rcall	.+20     	; 0x11fe <__divmodhi4_neg1>
    11ea:	77 fd       	sbrc	r23, 7
    11ec:	04 d0       	rcall	.+8      	; 0x11f6 <__divmodhi4_neg2>
    11ee:	e5 df       	rcall	.-54     	; 0x11ba <__udivmodhi4>
    11f0:	06 d0       	rcall	.+12     	; 0x11fe <__divmodhi4_neg1>
    11f2:	00 20       	and	r0, r0
    11f4:	1a f4       	brpl	.+6      	; 0x11fc <__divmodhi4_exit>

000011f6 <__divmodhi4_neg2>:
    11f6:	70 95       	com	r23
    11f8:	61 95       	neg	r22
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255

000011fc <__divmodhi4_exit>:
    11fc:	08 95       	ret

000011fe <__divmodhi4_neg1>:
    11fe:	f6 f7       	brtc	.-4      	; 0x11fc <__divmodhi4_exit>
    1200:	90 95       	com	r25
    1202:	81 95       	neg	r24
    1204:	9f 4f       	sbci	r25, 0xFF	; 255
    1206:	08 95       	ret

00001208 <__divmodsi4>:
    1208:	97 fb       	bst	r25, 7
    120a:	09 2e       	mov	r0, r25
    120c:	05 26       	eor	r0, r21
    120e:	0e d0       	rcall	.+28     	; 0x122c <__divmodsi4_neg1>
    1210:	57 fd       	sbrc	r21, 7
    1212:	04 d0       	rcall	.+8      	; 0x121c <__divmodsi4_neg2>
    1214:	14 d0       	rcall	.+40     	; 0x123e <__udivmodsi4>
    1216:	0a d0       	rcall	.+20     	; 0x122c <__divmodsi4_neg1>
    1218:	00 1c       	adc	r0, r0
    121a:	38 f4       	brcc	.+14     	; 0x122a <__divmodsi4_exit>

0000121c <__divmodsi4_neg2>:
    121c:	50 95       	com	r21
    121e:	40 95       	com	r20
    1220:	30 95       	com	r19
    1222:	21 95       	neg	r18
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	4f 4f       	sbci	r20, 0xFF	; 255
    1228:	5f 4f       	sbci	r21, 0xFF	; 255

0000122a <__divmodsi4_exit>:
    122a:	08 95       	ret

0000122c <__divmodsi4_neg1>:
    122c:	f6 f7       	brtc	.-4      	; 0x122a <__divmodsi4_exit>
    122e:	90 95       	com	r25
    1230:	80 95       	com	r24
    1232:	70 95       	com	r23
    1234:	61 95       	neg	r22
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__udivmodsi4>:
    123e:	a1 e2       	ldi	r26, 0x21	; 33
    1240:	1a 2e       	mov	r1, r26
    1242:	aa 1b       	sub	r26, r26
    1244:	bb 1b       	sub	r27, r27
    1246:	fd 01       	movw	r30, r26
    1248:	0d c0       	rjmp	.+26     	; 0x1264 <__udivmodsi4_ep>

0000124a <__udivmodsi4_loop>:
    124a:	aa 1f       	adc	r26, r26
    124c:	bb 1f       	adc	r27, r27
    124e:	ee 1f       	adc	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	a2 17       	cp	r26, r18
    1254:	b3 07       	cpc	r27, r19
    1256:	e4 07       	cpc	r30, r20
    1258:	f5 07       	cpc	r31, r21
    125a:	20 f0       	brcs	.+8      	; 0x1264 <__udivmodsi4_ep>
    125c:	a2 1b       	sub	r26, r18
    125e:	b3 0b       	sbc	r27, r19
    1260:	e4 0b       	sbc	r30, r20
    1262:	f5 0b       	sbc	r31, r21

00001264 <__udivmodsi4_ep>:
    1264:	66 1f       	adc	r22, r22
    1266:	77 1f       	adc	r23, r23
    1268:	88 1f       	adc	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	1a 94       	dec	r1
    126e:	69 f7       	brne	.-38     	; 0x124a <__udivmodsi4_loop>
    1270:	60 95       	com	r22
    1272:	70 95       	com	r23
    1274:	80 95       	com	r24
    1276:	90 95       	com	r25
    1278:	9b 01       	movw	r18, r22
    127a:	ac 01       	movw	r20, r24
    127c:	bd 01       	movw	r22, r26
    127e:	cf 01       	movw	r24, r30
    1280:	08 95       	ret

00001282 <atoi>:
    1282:	fc 01       	movw	r30, r24
    1284:	88 27       	eor	r24, r24
    1286:	99 27       	eor	r25, r25
    1288:	e8 94       	clt
    128a:	21 91       	ld	r18, Z+
    128c:	20 32       	cpi	r18, 0x20	; 32
    128e:	e9 f3       	breq	.-6      	; 0x128a <atoi+0x8>
    1290:	29 30       	cpi	r18, 0x09	; 9
    1292:	10 f0       	brcs	.+4      	; 0x1298 <atoi+0x16>
    1294:	2e 30       	cpi	r18, 0x0E	; 14
    1296:	c8 f3       	brcs	.-14     	; 0x128a <atoi+0x8>
    1298:	2b 32       	cpi	r18, 0x2B	; 43
    129a:	41 f0       	breq	.+16     	; 0x12ac <atoi+0x2a>
    129c:	2d 32       	cpi	r18, 0x2D	; 45
    129e:	39 f4       	brne	.+14     	; 0x12ae <atoi+0x2c>
    12a0:	68 94       	set
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <atoi+0x2a>
    12a4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__mulhi_const_10>
    12a8:	82 0f       	add	r24, r18
    12aa:	91 1d       	adc	r25, r1
    12ac:	21 91       	ld	r18, Z+
    12ae:	20 53       	subi	r18, 0x30	; 48
    12b0:	2a 30       	cpi	r18, 0x0A	; 10
    12b2:	c0 f3       	brcs	.-16     	; 0x12a4 <atoi+0x22>
    12b4:	1e f4       	brtc	.+6      	; 0x12bc <atoi+0x3a>
    12b6:	90 95       	com	r25
    12b8:	81 95       	neg	r24
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	08 95       	ret

000012be <strncpy>:
    12be:	fb 01       	movw	r30, r22
    12c0:	dc 01       	movw	r26, r24
    12c2:	41 50       	subi	r20, 0x01	; 1
    12c4:	50 40       	sbci	r21, 0x00	; 0
    12c6:	48 f0       	brcs	.+18     	; 0x12da <strncpy+0x1c>
    12c8:	01 90       	ld	r0, Z+
    12ca:	0d 92       	st	X+, r0
    12cc:	00 20       	and	r0, r0
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <strncpy+0x4>
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <strncpy+0x16>
    12d2:	1d 92       	st	X+, r1
    12d4:	41 50       	subi	r20, 0x01	; 1
    12d6:	50 40       	sbci	r21, 0x00	; 0
    12d8:	e0 f7       	brcc	.-8      	; 0x12d2 <strncpy+0x14>
    12da:	08 95       	ret

000012dc <__mulhi_const_10>:
    12dc:	7a e0       	ldi	r23, 0x0A	; 10
    12de:	97 9f       	mul	r25, r23
    12e0:	90 2d       	mov	r25, r0
    12e2:	87 9f       	mul	r24, r23
    12e4:	80 2d       	mov	r24, r0
    12e6:	91 0d       	add	r25, r1
    12e8:	11 24       	eor	r1, r1
    12ea:	08 95       	ret

000012ec <fputs>:
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	7c 01       	movw	r14, r24
    12fa:	8b 01       	movw	r16, r22
    12fc:	db 01       	movw	r26, r22
    12fe:	13 96       	adiw	r26, 0x03	; 3
    1300:	8c 91       	ld	r24, X
    1302:	81 fd       	sbrc	r24, 1
    1304:	03 c0       	rjmp	.+6      	; 0x130c <fputs+0x20>
    1306:	cf ef       	ldi	r28, 0xFF	; 255
    1308:	df ef       	ldi	r29, 0xFF	; 255
    130a:	13 c0       	rjmp	.+38     	; 0x1332 <fputs+0x46>
    130c:	c0 e0       	ldi	r28, 0x00	; 0
    130e:	d0 e0       	ldi	r29, 0x00	; 0
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <fputs+0x3c>
    1312:	d8 01       	movw	r26, r16
    1314:	18 96       	adiw	r26, 0x08	; 8
    1316:	ed 91       	ld	r30, X+
    1318:	fc 91       	ld	r31, X
    131a:	19 97       	sbiw	r26, 0x09	; 9
    131c:	b8 01       	movw	r22, r16
    131e:	09 95       	icall
    1320:	89 2b       	or	r24, r25
    1322:	11 f0       	breq	.+4      	; 0x1328 <fputs+0x3c>
    1324:	cf ef       	ldi	r28, 0xFF	; 255
    1326:	df ef       	ldi	r29, 0xFF	; 255
    1328:	f7 01       	movw	r30, r14
    132a:	81 91       	ld	r24, Z+
    132c:	7f 01       	movw	r14, r30
    132e:	88 23       	and	r24, r24
    1330:	81 f7       	brne	.-32     	; 0x1312 <fputs+0x26>
    1332:	ce 01       	movw	r24, r28
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	08 95       	ret

00001342 <gets>:
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	8c 01       	movw	r16, r24
    134c:	e0 91 b5 16 	lds	r30, 0x16B5
    1350:	f0 91 b6 16 	lds	r31, 0x16B6
    1354:	83 81       	ldd	r24, Z+3	; 0x03
    1356:	80 ff       	sbrs	r24, 0
    1358:	11 c0       	rjmp	.+34     	; 0x137c <gets+0x3a>
    135a:	e8 01       	movw	r28, r16
    135c:	80 91 b5 16 	lds	r24, 0x16B5
    1360:	90 91 b6 16 	lds	r25, 0x16B6
    1364:	0e 94 c6 09 	call	0x138c	; 0x138c <fgetc>
    1368:	2f ef       	ldi	r18, 0xFF	; 255
    136a:	8f 3f       	cpi	r24, 0xFF	; 255
    136c:	92 07       	cpc	r25, r18
    136e:	31 f0       	breq	.+12     	; 0x137c <gets+0x3a>
    1370:	89 93       	st	Y+, r24
    1372:	0a 97       	sbiw	r24, 0x0a	; 10
    1374:	99 f7       	brne	.-26     	; 0x135c <gets+0x1a>
    1376:	21 97       	sbiw	r28, 0x01	; 1
    1378:	18 82       	st	Y, r1
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <gets+0x3e>
    137c:	00 e0       	ldi	r16, 0x00	; 0
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	c8 01       	movw	r24, r16
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

0000138c <fgetc>:
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ec 01       	movw	r28, r24
    1392:	4b 81       	ldd	r20, Y+3	; 0x03
    1394:	40 ff       	sbrs	r20, 0
    1396:	1a c0       	rjmp	.+52     	; 0x13cc <fgetc+0x40>
    1398:	46 ff       	sbrs	r20, 6
    139a:	0a c0       	rjmp	.+20     	; 0x13b0 <fgetc+0x24>
    139c:	4f 7b       	andi	r20, 0xBF	; 191
    139e:	4b 83       	std	Y+3, r20	; 0x03
    13a0:	8e 81       	ldd	r24, Y+6	; 0x06
    13a2:	9f 81       	ldd	r25, Y+7	; 0x07
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	9f 83       	std	Y+7, r25	; 0x07
    13a8:	8e 83       	std	Y+6, r24	; 0x06
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	2b c0       	rjmp	.+86     	; 0x1406 <fgetc+0x7a>
    13b0:	42 ff       	sbrs	r20, 2
    13b2:	13 c0       	rjmp	.+38     	; 0x13da <fgetc+0x4e>
    13b4:	e8 81       	ld	r30, Y
    13b6:	f9 81       	ldd	r31, Y+1	; 0x01
    13b8:	80 81       	ld	r24, Z
    13ba:	28 2f       	mov	r18, r24
    13bc:	33 27       	eor	r19, r19
    13be:	27 fd       	sbrc	r18, 7
    13c0:	30 95       	com	r19
    13c2:	21 15       	cp	r18, r1
    13c4:	31 05       	cpc	r19, r1
    13c6:	29 f4       	brne	.+10     	; 0x13d2 <fgetc+0x46>
    13c8:	40 62       	ori	r20, 0x20	; 32
    13ca:	4b 83       	std	Y+3, r20	; 0x03
    13cc:	2f ef       	ldi	r18, 0xFF	; 255
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	1b c0       	rjmp	.+54     	; 0x1408 <fgetc+0x7c>
    13d2:	31 96       	adiw	r30, 0x01	; 1
    13d4:	f9 83       	std	Y+1, r31	; 0x01
    13d6:	e8 83       	st	Y, r30
    13d8:	11 c0       	rjmp	.+34     	; 0x13fc <fgetc+0x70>
    13da:	ea 85       	ldd	r30, Y+10	; 0x0a
    13dc:	fb 85       	ldd	r31, Y+11	; 0x0b
    13de:	ce 01       	movw	r24, r28
    13e0:	09 95       	icall
    13e2:	9c 01       	movw	r18, r24
    13e4:	97 ff       	sbrs	r25, 7
    13e6:	0a c0       	rjmp	.+20     	; 0x13fc <fgetc+0x70>
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	2f 5f       	subi	r18, 0xFF	; 255
    13ec:	3f 4f       	sbci	r19, 0xFF	; 255
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <fgetc+0x68>
    13f0:	80 e2       	ldi	r24, 0x20	; 32
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <fgetc+0x6a>
    13f4:	80 e1       	ldi	r24, 0x10	; 16
    13f6:	89 2b       	or	r24, r25
    13f8:	8b 83       	std	Y+3, r24	; 0x03
    13fa:	e8 cf       	rjmp	.-48     	; 0x13cc <fgetc+0x40>
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	9f 83       	std	Y+7, r25	; 0x07
    1404:	8e 83       	std	Y+6, r24	; 0x06
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	c9 01       	movw	r24, r18
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <_exit>:
    1410:	f8 94       	cli

00001412 <__stop_program>:
    1412:	ff cf       	rjmp	.-2      	; 0x1412 <__stop_program>
